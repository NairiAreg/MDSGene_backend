{
    "sourceFile": "utils.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1727985144895,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1727985169847,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,109 +4,265 @@\n import json\n \n _dataframe_cache = {}\n \n+\n def get_cached_dataframe(file_path):\n     global _dataframe_cache\n \n     file_mod_time = os.path.getmtime(file_path)\n \n-    if file_path in _dataframe_cache and _dataframe_cache[file_path]['mod_time'] == file_mod_time:\n-        return _dataframe_cache[file_path]['dataframe']\n+    if (\n+        file_path in _dataframe_cache\n+        and _dataframe_cache[file_path][\"mod_time\"] == file_mod_time\n+    ):\n+        return _dataframe_cache[file_path][\"dataframe\"]\n \n     _, file_extension = os.path.splitext(file_path)\n \n-    if file_extension.lower() == '.xlsx':\n-        engine = 'openpyxl'\n-    elif file_extension.lower() == '.xls':\n-        engine = 'xlrd'\n+    if file_extension.lower() == \".xlsx\":\n+        engine = \"openpyxl\"\n+    elif file_extension.lower() == \".xls\":\n+        engine = \"xlrd\"\n     else:\n         raise ValueError(f\"Unsupported file extension: {file_extension}\")\n \n     df = pd.read_excel(file_path, engine=engine)\n \n-    _dataframe_cache[file_path] = {\n-        'dataframe': df,\n-        'mod_time': file_mod_time\n-    }\n+    _dataframe_cache[file_path] = {\"dataframe\": df, \"mod_time\": file_mod_time}\n \n     return df\n \n+\n def apply_filter(df, filter_criteria, aao, country):\n     if filter_criteria == 1:\n-        df = df[df['index_pat'] == 'yes']\n+        df = df[df[\"index_pat\"] == \"yes\"]\n     elif filter_criteria == 2 and aao is not None:\n-        df = df[df['aao'] < aao]\n+        df = df[df[\"aao\"] < aao]\n     elif filter_criteria == 3 and aao is not None:\n-        df = df[df['aao'] >= aao]\n+        df = df[df[\"aao\"] >= aao]\n     elif filter_criteria == 4:\n-        df = df[df['sex'] == 'female']\n+        df = df[df[\"sex\"] == \"female\"]\n     elif filter_criteria == 5:\n-        df = df[df['sex'] == 'male']\n+        df = df[df[\"sex\"] == \"male\"]\n     elif filter_criteria == 6:\n-        df = df[(df['mut1_genotype'] == 'hom') | (df['mut2_genotype'] == 'hom') | (df['mut3_genotype'] == 'hom')]\n+        df = df[\n+            (df[\"mut1_genotype\"] == \"hom\")\n+            | (df[\"mut2_genotype\"] == \"hom\")\n+            | (df[\"mut3_genotype\"] == \"hom\")\n+        ]\n     elif filter_criteria == 7:\n-        df = df[(df['mut1_genotype'] == 'het') | (df['mut2_genotype'] == 'het') | (df['mut3_genotype'] == 'het')]\n+        df = df[\n+            (df[\"mut1_genotype\"] == \"het\")\n+            | (df[\"mut2_genotype\"] == \"het\")\n+            | (df[\"mut3_genotype\"] == \"het\")\n+        ]\n     elif filter_criteria == 8:\n-        df = df[(df['mut1_genotype'] == 'comp_het') | (df['mut2_genotype'] == 'comp_het') | (df['mut3_genotype'] == 'comp_het')]\n+        df = df[\n+            (df[\"mut1_genotype\"] == \"comp_het\")\n+            | (df[\"mut2_genotype\"] == \"comp_het\")\n+            | (df[\"mut3_genotype\"] == \"comp_het\")\n+        ]\n     elif filter_criteria == 9:\n-        df = df[(df['mut1_genotype'].isin(['hom', 'comp_het'])) | (df['mut2_genotype'].isin(['hom', 'comp_het'])) | (df['mut3_genotype'].isin(['hom', 'comp_het']))]\n+        df = df[\n+            (df[\"mut1_genotype\"].isin([\"hom\", \"comp_het\"]))\n+            | (df[\"mut2_genotype\"].isin([\"hom\", \"comp_het\"]))\n+            | (df[\"mut3_genotype\"].isin([\"hom\", \"comp_het\"]))\n+        ]\n \n     if country:\n         country_map = {\n-           'AFG': 'Afghanistan', 'ALB': 'Albania', 'DZA': 'Algeria', 'AND': 'Andorra', \n-    'AGO': 'Angola', 'ATG': 'Antigua and Barbuda', 'ARG': 'Argentina', 'ARM': 'Armenia', \n-    'AUS': 'Australia', 'AUT': 'Austria', 'AZE': 'Azerbaijan', 'BHS': 'Bahamas', \n-    'BHR': 'Bahrain', 'BGD': 'Bangladesh', 'BRB': 'Barbados', 'BLR': 'Belarus', \n-    'BEL': 'Belgium', 'BLZ': 'Belize', 'BEN': 'Benin', 'BTN': 'Bhutan', \n-    'BOL': 'Bolivia', 'BIH': 'Bosnia and Herzegovina', 'BWA': 'Botswana', \n-    'BRA': 'Brazil', 'BRN': 'Brunei', 'BGR': 'Bulgaria', 'BFA': 'Burkina Faso', \n-    'BDI': 'Burundi', 'CPV': 'Cabo Verde', 'KHM': 'Cambodia', 'CMR': 'Cameroon', \n-    'CAN': 'Canada', 'CAF': 'Central African Republic', 'TCD': 'Chad', 'CHL': 'Chile', \n-    'CHN': 'China', 'COL': 'Colombia', 'COM': 'Comoros', 'COG': 'Congo', \n-    'CRI': 'Costa Rica', 'HRV': 'Croatia', 'CUB': 'Cuba', 'CYP': 'Cyprus', \n-    'CZE': 'Czech Republic', 'DNK': 'Denmark', 'DJI': 'Djibouti', 'DMA': 'Dominica', \n-    'DOM': 'Dominican Republic', 'ECU': 'Ecuador', 'EGY': 'Egypt', 'SLV': 'El Salvador', \n-    'GNQ': 'Equatorial Guinea', 'ERI': 'Eritrea', 'EST': 'Estonia', 'SWZ': 'Eswatini', \n-    'ETH': 'Ethiopia', 'FJI': 'Fiji', 'FIN': 'Finland', 'FRA': 'France', \n-    'GAB': 'Gabon', 'GMB': 'Gambia', 'GEO': 'Georgia', 'DEU': 'Germany', \n-    'GHA': 'Ghana', 'GRC': 'Greece', 'GRD': 'Grenada', 'GTM': 'Guatemala', \n-    'GIN': 'Guinea', 'GNB': 'Guinea-Bissau', 'GUY': 'Guyana', 'HTI': 'Haiti', \n-    'HND': 'Honduras', 'HUN': 'Hungary', 'ISL': 'Iceland', 'IND': 'India', \n-    'IDN': 'Indonesia', 'IRN': 'Iran', 'IRQ': 'Iraq', 'IRL': 'Ireland', \n-    'ISR': 'Israel', 'ITA': 'Italy', 'JAM': 'Jamaica', 'JPN': 'Japan', \n-    'JOR': 'Jordan', 'KAZ': 'Kazakhstan', 'KEN': 'Kenya', 'KIR': 'Kiribati', \n-    'KWT': 'Kuwait', 'KGZ': 'Kyrgyzstan', 'LAO': 'Laos', 'LVA': 'Latvia', \n-    'LBN': 'Lebanon', 'LSO': 'Lesotho', 'LBR': 'Liberia', 'LBY': 'Libya', \n-    'LIE': 'Liechtenstein', 'LTU': 'Lithuania', 'LUX': 'Luxembourg', 'MDG': 'Madagascar', \n-    'MWI': 'Malawi', 'MYS': 'Malaysia', 'MDV': 'Maldives', 'MLI': 'Mali', \n-    'MLT': 'Malta', 'MHL': 'Marshall Islands', 'MRT': 'Mauritania', 'MUS': 'Mauritius', \n-    'MEX': 'Mexico', 'FSM': 'Micronesia', 'MDA': 'Moldova', 'MCO': 'Monaco', \n-    'MNG': 'Mongolia', 'MNE': 'Montenegro', 'MAR': 'Morocco', 'MOZ': 'Mozambique', \n-    'MMR': 'Myanmar', 'NAM': 'Namibia', 'NRU': 'Nauru', 'NPL': 'Nepal', \n-    'NLD': 'Netherlands', 'NZL': 'New Zealand', 'NIC': 'Nicaragua', 'NER': 'Niger', \n-    'NGA': 'Nigeria', 'PRK': 'North Korea', 'MKD': 'North Macedonia', 'NOR': 'Norway', \n-    'OMN': 'Oman', 'PAK': 'Pakistan', 'PLW': 'Palau', 'PAN': 'Panama', \n-    'PNG': 'Papua New Guinea', 'PRY': 'Paraguay', 'PER': 'Peru', 'PHL': 'Philippines', \n-    'POL': 'Poland', 'PRT': 'Portugal', 'QAT': 'Qatar', 'KOR': 'South Korea', \n-    'MDA': 'Moldova', 'SAU': 'Saudi Arabia', 'SEN': 'Senegal', 'SRB': 'Serbia', \n-    'SYC': 'Seychelles', 'SLE': 'Sierra Leone', 'SGP': 'Singapore', 'SVK': 'Slovakia', \n-    'SVN': 'Slovenia', 'SLB': 'Solomon Islands', 'SOM': 'Somalia', 'ZAF': 'South Africa', \n-    'ESP': 'Spain', 'LKA': 'Sri Lanka', 'SDN': 'Sudan', 'SUR': 'Suriname', \n-    'SWE': 'Sweden', 'CHE': 'Switzerland', 'SYR': 'Syria', 'TWN': 'Taiwan', \n-    'TJK': 'Tajikistan', 'TZA': 'Tanzania', 'THA': 'Thailand', 'TLS': 'Timor-Leste', \n-    'TGO': 'Togo', 'TON': 'Tonga', 'TTO': 'Trinidad and Tobago', 'TUN': 'Tunisia', \n-    'TUR': 'Turkey', 'TKM': 'Turkmenistan', 'TUV': 'Tuvalu', 'UGA': 'Uganda', \n-    'UKR': 'Ukraine', 'ARE': 'United Arab Emirates', 'GBR': 'United Kingdom', \n-    'USA': 'United States', 'URY': 'Uruguay', 'UZB': 'Uzbekistan', 'VUT': 'Vanuatu', \n-    'VAT': 'Vatican City', 'VEN': 'Venezuela', 'VNM': 'Vietnam', 'YEM': 'Yemen', \n-    'ZMB': 'Zambia', 'ZWE': 'Zimbabwe'\n+            \"AFG\": \"Afghanistan\",\n+            \"ALB\": \"Albania\",\n+            \"DZA\": \"Algeria\",\n+            \"AND\": \"Andorra\",\n+            \"AGO\": \"Angola\",\n+            \"ATG\": \"Antigua and Barbuda\",\n+            \"ARG\": \"Argentina\",\n+            \"ARM\": \"Armenia\",\n+            \"AUS\": \"Australia\",\n+            \"AUT\": \"Austria\",\n+            \"AZE\": \"Azerbaijan\",\n+            \"BHS\": \"Bahamas\",\n+            \"BHR\": \"Bahrain\",\n+            \"BGD\": \"Bangladesh\",\n+            \"BRB\": \"Barbados\",\n+            \"BLR\": \"Belarus\",\n+            \"BEL\": \"Belgium\",\n+            \"BLZ\": \"Belize\",\n+            \"BEN\": \"Benin\",\n+            \"BTN\": \"Bhutan\",\n+            \"BOL\": \"Bolivia\",\n+            \"BIH\": \"Bosnia and Herzegovina\",\n+            \"BWA\": \"Botswana\",\n+            \"BRA\": \"Brazil\",\n+            \"BRN\": \"Brunei\",\n+            \"BGR\": \"Bulgaria\",\n+            \"BFA\": \"Burkina Faso\",\n+            \"BDI\": \"Burundi\",\n+            \"CPV\": \"Cabo Verde\",\n+            \"KHM\": \"Cambodia\",\n+            \"CMR\": \"Cameroon\",\n+            \"CAN\": \"Canada\",\n+            \"CAF\": \"Central African Republic\",\n+            \"TCD\": \"Chad\",\n+            \"CHL\": \"Chile\",\n+            \"CHN\": \"China\",\n+            \"COL\": \"Colombia\",\n+            \"COM\": \"Comoros\",\n+            \"COG\": \"Congo\",\n+            \"CRI\": \"Costa Rica\",\n+            \"HRV\": \"Croatia\",\n+            \"CUB\": \"Cuba\",\n+            \"CYP\": \"Cyprus\",\n+            \"CZE\": \"Czech Republic\",\n+            \"DNK\": \"Denmark\",\n+            \"DJI\": \"Djibouti\",\n+            \"DMA\": \"Dominica\",\n+            \"DOM\": \"Dominican Republic\",\n+            \"ECU\": \"Ecuador\",\n+            \"EGY\": \"Egypt\",\n+            \"SLV\": \"El Salvador\",\n+            \"GNQ\": \"Equatorial Guinea\",\n+            \"ERI\": \"Eritrea\",\n+            \"EST\": \"Estonia\",\n+            \"SWZ\": \"Eswatini\",\n+            \"ETH\": \"Ethiopia\",\n+            \"FJI\": \"Fiji\",\n+            \"FIN\": \"Finland\",\n+            \"FRA\": \"France\",\n+            \"GAB\": \"Gabon\",\n+            \"GMB\": \"Gambia\",\n+            \"GEO\": \"Georgia\",\n+            \"DEU\": \"Germany\",\n+            \"GHA\": \"Ghana\",\n+            \"GRC\": \"Greece\",\n+            \"GRD\": \"Grenada\",\n+            \"GTM\": \"Guatemala\",\n+            \"GIN\": \"Guinea\",\n+            \"GNB\": \"Guinea-Bissau\",\n+            \"GUY\": \"Guyana\",\n+            \"HTI\": \"Haiti\",\n+            \"HND\": \"Honduras\",\n+            \"HUN\": \"Hungary\",\n+            \"ISL\": \"Iceland\",\n+            \"IND\": \"India\",\n+            \"IDN\": \"Indonesia\",\n+            \"IRN\": \"Iran\",\n+            \"IRQ\": \"Iraq\",\n+            \"IRL\": \"Ireland\",\n+            \"ISR\": \"Israel\",\n+            \"ITA\": \"Italy\",\n+            \"JAM\": \"Jamaica\",\n+            \"JPN\": \"Japan\",\n+            \"JOR\": \"Jordan\",\n+            \"KAZ\": \"Kazakhstan\",\n+            \"KEN\": \"Kenya\",\n+            \"KIR\": \"Kiribati\",\n+            \"KWT\": \"Kuwait\",\n+            \"KGZ\": \"Kyrgyzstan\",\n+            \"LAO\": \"Laos\",\n+            \"LVA\": \"Latvia\",\n+            \"LBN\": \"Lebanon\",\n+            \"LSO\": \"Lesotho\",\n+            \"LBR\": \"Liberia\",\n+            \"LBY\": \"Libya\",\n+            \"LIE\": \"Liechtenstein\",\n+            \"LTU\": \"Lithuania\",\n+            \"LUX\": \"Luxembourg\",\n+            \"MDG\": \"Madagascar\",\n+            \"MWI\": \"Malawi\",\n+            \"MYS\": \"Malaysia\",\n+            \"MDV\": \"Maldives\",\n+            \"MLI\": \"Mali\",\n+            \"MLT\": \"Malta\",\n+            \"MHL\": \"Marshall Islands\",\n+            \"MRT\": \"Mauritania\",\n+            \"MUS\": \"Mauritius\",\n+            \"MEX\": \"Mexico\",\n+            \"FSM\": \"Micronesia\",\n+            \"MDA\": \"Moldova\",\n+            \"MCO\": \"Monaco\",\n+            \"MNG\": \"Mongolia\",\n+            \"MNE\": \"Montenegro\",\n+            \"MAR\": \"Morocco\",\n+            \"MOZ\": \"Mozambique\",\n+            \"MMR\": \"Myanmar\",\n+            \"NAM\": \"Namibia\",\n+            \"NRU\": \"Nauru\",\n+            \"NPL\": \"Nepal\",\n+            \"NLD\": \"Netherlands\",\n+            \"NZL\": \"New Zealand\",\n+            \"NIC\": \"Nicaragua\",\n+            \"NER\": \"Niger\",\n+            \"NGA\": \"Nigeria\",\n+            \"PRK\": \"North Korea\",\n+            \"MKD\": \"North Macedonia\",\n+            \"NOR\": \"Norway\",\n+            \"OMN\": \"Oman\",\n+            \"PAK\": \"Pakistan\",\n+            \"PLW\": \"Palau\",\n+            \"PAN\": \"Panama\",\n+            \"PNG\": \"Papua New Guinea\",\n+            \"PRY\": \"Paraguay\",\n+            \"PER\": \"Peru\",\n+            \"PHL\": \"Philippines\",\n+            \"POL\": \"Poland\",\n+            \"PRT\": \"Portugal\",\n+            \"QAT\": \"Qatar\",\n+            \"KOR\": \"South Korea\",\n+            \"MDA\": \"Moldova\",\n+            \"SAU\": \"Saudi Arabia\",\n+            \"SEN\": \"Senegal\",\n+            \"SRB\": \"Serbia\",\n+            \"SYC\": \"Seychelles\",\n+            \"SLE\": \"Sierra Leone\",\n+            \"SGP\": \"Singapore\",\n+            \"SVK\": \"Slovakia\",\n+            \"SVN\": \"Slovenia\",\n+            \"SLB\": \"Solomon Islands\",\n+            \"SOM\": \"Somalia\",\n+            \"ZAF\": \"South Africa\",\n+            \"ESP\": \"Spain\",\n+            \"LKA\": \"Sri Lanka\",\n+            \"SDN\": \"Sudan\",\n+            \"SUR\": \"Suriname\",\n+            \"SWE\": \"Sweden\",\n+            \"CHE\": \"Switzerland\",\n+            \"SYR\": \"Syria\",\n+            \"TWN\": \"Taiwan\",\n+            \"TJK\": \"Tajikistan\",\n+            \"TZA\": \"Tanzania\",\n+            \"THA\": \"Thailand\",\n+            \"TLS\": \"Timor-Leste\",\n+            \"TGO\": \"Togo\",\n+            \"TON\": \"Tonga\",\n+            \"TTO\": \"Trinidad and Tobago\",\n+            \"TUN\": \"Tunisia\",\n+            \"TUR\": \"Turkey\",\n+            \"TKM\": \"Turkmenistan\",\n+            \"TUV\": \"Tuvalu\",\n+            \"UGA\": \"Uganda\",\n+            \"UKR\": \"Ukraine\",\n+            \"ARE\": \"United Arab Emirates\",\n+            \"GBR\": \"United Kingdom\",\n+            \"USA\": \"United States\",\n+            \"URY\": \"Uruguay\",\n+            \"UZB\": \"Uzbekistan\",\n+            \"VUT\": \"Vanuatu\",\n+            \"VAT\": \"Vatican City\",\n+            \"VEN\": \"Venezuela\",\n+            \"VNM\": \"Vietnam\",\n+            \"YEM\": \"Yemen\",\n+            \"ZMB\": \"Zambia\",\n+            \"ZWE\": \"Zimbabwe\",\n         }\n         if country in country_map:\n-            df = df[df['country'] == country_map[country]]\n+            df = df[df[\"country\"] == country_map[country]]\n \n     return df\n \n+\n class NumpyEncoder(json.JSONEncoder):\n     def default(self, obj):\n         if isinstance(obj, np.integer):\n             return int(obj)\n@@ -115,8 +271,9 @@\n         elif isinstance(obj, np.ndarray):\n             return obj.tolist()\n         return super(NumpyEncoder, self).default(obj)\n \n+\n def safe_get(df, column, index, default=None):\n     try:\n         value = df[column].iloc[index]\n         if pd.isna(value):\n@@ -124,5 +281,5 @@\n         if isinstance(value, (np.integer, np.floating)):\n             return value.item()\n         return value\n     except:\n-        return default\n\\ No newline at end of file\n+        return default\n"
                }
            ],
            "date": 1727985144895,
            "name": "Commit-0",
            "content": "import pandas as pd\nimport numpy as np\nimport os\nimport json\n\n_dataframe_cache = {}\n\ndef get_cached_dataframe(file_path):\n    global _dataframe_cache\n\n    file_mod_time = os.path.getmtime(file_path)\n\n    if file_path in _dataframe_cache and _dataframe_cache[file_path]['mod_time'] == file_mod_time:\n        return _dataframe_cache[file_path]['dataframe']\n\n    _, file_extension = os.path.splitext(file_path)\n\n    if file_extension.lower() == '.xlsx':\n        engine = 'openpyxl'\n    elif file_extension.lower() == '.xls':\n        engine = 'xlrd'\n    else:\n        raise ValueError(f\"Unsupported file extension: {file_extension}\")\n\n    df = pd.read_excel(file_path, engine=engine)\n\n    _dataframe_cache[file_path] = {\n        'dataframe': df,\n        'mod_time': file_mod_time\n    }\n\n    return df\n\ndef apply_filter(df, filter_criteria, aao, country):\n    if filter_criteria == 1:\n        df = df[df['index_pat'] == 'yes']\n    elif filter_criteria == 2 and aao is not None:\n        df = df[df['aao'] < aao]\n    elif filter_criteria == 3 and aao is not None:\n        df = df[df['aao'] >= aao]\n    elif filter_criteria == 4:\n        df = df[df['sex'] == 'female']\n    elif filter_criteria == 5:\n        df = df[df['sex'] == 'male']\n    elif filter_criteria == 6:\n        df = df[(df['mut1_genotype'] == 'hom') | (df['mut2_genotype'] == 'hom') | (df['mut3_genotype'] == 'hom')]\n    elif filter_criteria == 7:\n        df = df[(df['mut1_genotype'] == 'het') | (df['mut2_genotype'] == 'het') | (df['mut3_genotype'] == 'het')]\n    elif filter_criteria == 8:\n        df = df[(df['mut1_genotype'] == 'comp_het') | (df['mut2_genotype'] == 'comp_het') | (df['mut3_genotype'] == 'comp_het')]\n    elif filter_criteria == 9:\n        df = df[(df['mut1_genotype'].isin(['hom', 'comp_het'])) | (df['mut2_genotype'].isin(['hom', 'comp_het'])) | (df['mut3_genotype'].isin(['hom', 'comp_het']))]\n\n    if country:\n        country_map = {\n           'AFG': 'Afghanistan', 'ALB': 'Albania', 'DZA': 'Algeria', 'AND': 'Andorra', \n    'AGO': 'Angola', 'ATG': 'Antigua and Barbuda', 'ARG': 'Argentina', 'ARM': 'Armenia', \n    'AUS': 'Australia', 'AUT': 'Austria', 'AZE': 'Azerbaijan', 'BHS': 'Bahamas', \n    'BHR': 'Bahrain', 'BGD': 'Bangladesh', 'BRB': 'Barbados', 'BLR': 'Belarus', \n    'BEL': 'Belgium', 'BLZ': 'Belize', 'BEN': 'Benin', 'BTN': 'Bhutan', \n    'BOL': 'Bolivia', 'BIH': 'Bosnia and Herzegovina', 'BWA': 'Botswana', \n    'BRA': 'Brazil', 'BRN': 'Brunei', 'BGR': 'Bulgaria', 'BFA': 'Burkina Faso', \n    'BDI': 'Burundi', 'CPV': 'Cabo Verde', 'KHM': 'Cambodia', 'CMR': 'Cameroon', \n    'CAN': 'Canada', 'CAF': 'Central African Republic', 'TCD': 'Chad', 'CHL': 'Chile', \n    'CHN': 'China', 'COL': 'Colombia', 'COM': 'Comoros', 'COG': 'Congo', \n    'CRI': 'Costa Rica', 'HRV': 'Croatia', 'CUB': 'Cuba', 'CYP': 'Cyprus', \n    'CZE': 'Czech Republic', 'DNK': 'Denmark', 'DJI': 'Djibouti', 'DMA': 'Dominica', \n    'DOM': 'Dominican Republic', 'ECU': 'Ecuador', 'EGY': 'Egypt', 'SLV': 'El Salvador', \n    'GNQ': 'Equatorial Guinea', 'ERI': 'Eritrea', 'EST': 'Estonia', 'SWZ': 'Eswatini', \n    'ETH': 'Ethiopia', 'FJI': 'Fiji', 'FIN': 'Finland', 'FRA': 'France', \n    'GAB': 'Gabon', 'GMB': 'Gambia', 'GEO': 'Georgia', 'DEU': 'Germany', \n    'GHA': 'Ghana', 'GRC': 'Greece', 'GRD': 'Grenada', 'GTM': 'Guatemala', \n    'GIN': 'Guinea', 'GNB': 'Guinea-Bissau', 'GUY': 'Guyana', 'HTI': 'Haiti', \n    'HND': 'Honduras', 'HUN': 'Hungary', 'ISL': 'Iceland', 'IND': 'India', \n    'IDN': 'Indonesia', 'IRN': 'Iran', 'IRQ': 'Iraq', 'IRL': 'Ireland', \n    'ISR': 'Israel', 'ITA': 'Italy', 'JAM': 'Jamaica', 'JPN': 'Japan', \n    'JOR': 'Jordan', 'KAZ': 'Kazakhstan', 'KEN': 'Kenya', 'KIR': 'Kiribati', \n    'KWT': 'Kuwait', 'KGZ': 'Kyrgyzstan', 'LAO': 'Laos', 'LVA': 'Latvia', \n    'LBN': 'Lebanon', 'LSO': 'Lesotho', 'LBR': 'Liberia', 'LBY': 'Libya', \n    'LIE': 'Liechtenstein', 'LTU': 'Lithuania', 'LUX': 'Luxembourg', 'MDG': 'Madagascar', \n    'MWI': 'Malawi', 'MYS': 'Malaysia', 'MDV': 'Maldives', 'MLI': 'Mali', \n    'MLT': 'Malta', 'MHL': 'Marshall Islands', 'MRT': 'Mauritania', 'MUS': 'Mauritius', \n    'MEX': 'Mexico', 'FSM': 'Micronesia', 'MDA': 'Moldova', 'MCO': 'Monaco', \n    'MNG': 'Mongolia', 'MNE': 'Montenegro', 'MAR': 'Morocco', 'MOZ': 'Mozambique', \n    'MMR': 'Myanmar', 'NAM': 'Namibia', 'NRU': 'Nauru', 'NPL': 'Nepal', \n    'NLD': 'Netherlands', 'NZL': 'New Zealand', 'NIC': 'Nicaragua', 'NER': 'Niger', \n    'NGA': 'Nigeria', 'PRK': 'North Korea', 'MKD': 'North Macedonia', 'NOR': 'Norway', \n    'OMN': 'Oman', 'PAK': 'Pakistan', 'PLW': 'Palau', 'PAN': 'Panama', \n    'PNG': 'Papua New Guinea', 'PRY': 'Paraguay', 'PER': 'Peru', 'PHL': 'Philippines', \n    'POL': 'Poland', 'PRT': 'Portugal', 'QAT': 'Qatar', 'KOR': 'South Korea', \n    'MDA': 'Moldova', 'SAU': 'Saudi Arabia', 'SEN': 'Senegal', 'SRB': 'Serbia', \n    'SYC': 'Seychelles', 'SLE': 'Sierra Leone', 'SGP': 'Singapore', 'SVK': 'Slovakia', \n    'SVN': 'Slovenia', 'SLB': 'Solomon Islands', 'SOM': 'Somalia', 'ZAF': 'South Africa', \n    'ESP': 'Spain', 'LKA': 'Sri Lanka', 'SDN': 'Sudan', 'SUR': 'Suriname', \n    'SWE': 'Sweden', 'CHE': 'Switzerland', 'SYR': 'Syria', 'TWN': 'Taiwan', \n    'TJK': 'Tajikistan', 'TZA': 'Tanzania', 'THA': 'Thailand', 'TLS': 'Timor-Leste', \n    'TGO': 'Togo', 'TON': 'Tonga', 'TTO': 'Trinidad and Tobago', 'TUN': 'Tunisia', \n    'TUR': 'Turkey', 'TKM': 'Turkmenistan', 'TUV': 'Tuvalu', 'UGA': 'Uganda', \n    'UKR': 'Ukraine', 'ARE': 'United Arab Emirates', 'GBR': 'United Kingdom', \n    'USA': 'United States', 'URY': 'Uruguay', 'UZB': 'Uzbekistan', 'VUT': 'Vanuatu', \n    'VAT': 'Vatican City', 'VEN': 'Venezuela', 'VNM': 'Vietnam', 'YEM': 'Yemen', \n    'ZMB': 'Zambia', 'ZWE': 'Zimbabwe'\n        }\n        if country in country_map:\n            df = df[df['country'] == country_map[country]]\n\n    return df\n\nclass NumpyEncoder(json.JSONEncoder):\n    def default(self, obj):\n        if isinstance(obj, np.integer):\n            return int(obj)\n        elif isinstance(obj, np.floating):\n            return float(obj)\n        elif isinstance(obj, np.ndarray):\n            return obj.tolist()\n        return super(NumpyEncoder, self).default(obj)\n\ndef safe_get(df, column, index, default=None):\n    try:\n        value = df[column].iloc[index]\n        if pd.isna(value):\n            return default\n        if isinstance(value, (np.integer, np.floating)):\n            return value.item()\n        return value\n    except:\n        return default"
        }
    ]
}