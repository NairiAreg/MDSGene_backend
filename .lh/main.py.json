{
    "sourceFile": "main.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 9,
            "patches": [
                {
                    "date": 1727974119845,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1727974129930,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,8 +61,14 @@\n     return number_of_cases\r\n \r\n #добавь еще один endpoinт для get_unique_studies(disease_abbrev, gene, filter_criteria, aao, country, directory='excel'):\r\n #все параметры кромe disease_abbrev: str, gene: str не обязательные\r\n-@app.get(\"/unique_studies/{disease_abbrev}/{gene}/{filter_criteria}/{aao}/{country}\")\r\n-async def unique_studies_endpoint(disease_abbrev: str, gene: str, filter_criteria: str = None, aao: str = None, country: str = None):\r\n+@app.get(\"/unique_studies/{disease_abbrev}/{gene}\")\r\n+async def unique_studies_endpoint(\r\n+    disease_abbrev: str, \r\n+    gene: str, \r\n+    filter_criteria: str = None, \r\n+    aao: str = None, \r\n+    country: str = None\r\n+):\r\n     unique_studies = overview.get_unique_studies(disease_abbrev, gene, filter_criteria, aao, country)\r\n     return unique_studies\r\n"
                },
                {
                    "date": 1727974208697,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,14 +61,8 @@\n     return number_of_cases\r\n \r\n #добавь еще один endpoinт для get_unique_studies(disease_abbrev, gene, filter_criteria, aao, country, directory='excel'):\r\n #все параметры кромe disease_abbrev: str, gene: str не обязательные\r\n-@app.get(\"/unique_studies/{disease_abbrev}/{gene}\")\r\n-async def unique_studies_endpoint(\r\n-    disease_abbrev: str, \r\n-    gene: str, \r\n-    filter_criteria: str = None, \r\n-    aao: str = None, \r\n-    country: str = None\r\n-):\r\n+@app.get(\"/unique_studies/{disease_abbrev}/{gene}/{filter_criteria}/{aao}/{country}\")\r\n+async def unique_studies_endpoint(disease_abbrev: str, gene: str, filter_criteria: str = None, aao: str = None, country: str = None):\r\n     unique_studies = overview.get_unique_studies(disease_abbrev, gene, filter_criteria, aao, country)\r\n     return unique_studies\r\n"
                },
                {
                    "date": 1727974214158,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,8 +61,14 @@\n     return number_of_cases\r\n \r\n #добавь еще один endpoinт для get_unique_studies(disease_abbrev, gene, filter_criteria, aao, country, directory='excel'):\r\n #все параметры кромe disease_abbrev: str, gene: str не обязательные\r\n-@app.get(\"/unique_studies/{disease_abbrev}/{gene}/{filter_criteria}/{aao}/{country}\")\r\n-async def unique_studies_endpoint(disease_abbrev: str, gene: str, filter_criteria: str = None, aao: str = None, country: str = None):\r\n+@app.get(\"/unique_studies/{disease_abbrev}/{gene}\")\r\n+async def unique_studies_endpoint(\r\n+    disease_abbrev: str, \r\n+    gene: str, \r\n+    filter_criteria: str = None, \r\n+    aao: str = None, \r\n+    country: str = None\r\n+):\r\n     unique_studies = overview.get_unique_studies(disease_abbrev, gene, filter_criteria, aao, country)\r\n     return unique_studies\r\n"
                },
                {
                    "date": 1727974220075,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,68 @@\n+from fastapi import FastAPI\r\n+import diseases\r\n+import overview\r\n+\r\n+from fastapi.openapi.utils import get_openapi\r\n+\r\n+app = FastAPI()\r\n+\r\n+def custom_openapi():\r\n+    if app.openapi_schema:\r\n+        return app.openapi_schema\r\n+    openapi_schema = get_openapi(\r\n+        title=\"Custom title\",\r\n+        version=\"2.5.0\",\r\n+        description=\"This is a very custom OpenAPI schema\",\r\n+        routes=app.routes,\r\n+    )\r\n+    app.openapi_schema = openapi_schema\r\n+    return app.openapi_schema\r\n+\r\n+\r\n+@app.get(\"/\")\r\n+async def read_root():\r\n+    return {\"Hello\": \"World\"}\r\n+\r\n+\r\n+@app.get(\"/items/{item_id}\")\r\n+async def read_item(item_id: int, q: str = None):\r\n+    return {\"item_id\": item_id, \"q\": q}\r\n+\r\n+\r\n+@app.get(\"/disease_abbrev\")\r\n+async def disease_abbrev_endpoint():\r\n+    unique_disease_abbrev = diseases.get_unique_disease_abbrev()\r\n+    return unique_disease_abbrev\r\n+\r\n+\r\n+@app.get(\"/disease_genes\")\r\n+async def disease_genes_endpoint():\r\n+    disease_genes = diseases.get_disease_and_genes()\r\n+    return disease_genes\r\n+\r\n+#создай мне endpoint\r\n+\r\n+\r\n+# Add a new endpoint to get the unique studies for a given disease abbreviation and gene\r\n+@app.get(\"/unique_studies/{disease_abbrev}/{gene}\")\r\n+async def unique_studies_endpoint(disease_abbrev: str, gene: str):\r\n+    unique_studies = overview.get_unique_studies(disease_abbrev, gene)\r\n+    return unique_studies\r\n+\r\n+# Add a new endpoint to get the study design for each study in a list of PMIDs\r\n+@app.get(\"/study_designs\")\r\n+async def study_designs_endpoint(pmid_list: str):\r\n+    study_designs = overview.get_study_design_for_each_study(pmid_list)\r\n+    return study_designs\r\n+\r\n+@app.get(\"/number_of_cases\")\r\n+async def number_of_cases_endpoint(pmid_list: str):\r\n+    number_of_cases = overview.get_number_of_cases_for_each_study(pmid_list)\r\n+    return number_of_cases\r\n+\r\n+#добавь еще один endpoinт для get_unique_studies(disease_abbrev, gene, filter_criteria, aao, country, directory='excel'):\r\n+#все параметры кромe disease_abbrev: str, gene: str не обязательные\r\n+@app.get(\"/unique_studies/{disease_abbrev}/{gene}/{filter_criteria}/{aao}/{country}\")\r\n+async def unique_studies_endpoint(disease_abbrev: str, gene: str, filter_criteria: str = None, aao: str = None, country: str = None):\r\n+    unique_studies = overview.get_unique_studies(disease_abbrev, gene, filter_criteria, aao, country)\r\n+    return unique_studies\r\n"
                },
                {
                    "date": 1727974227528,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,74 @@\n+from fastapi import FastAPI\r\n+import diseases\r\n+import overview\r\n+\r\n+from fastapi.openapi.utils import get_openapi\r\n+\r\n+app = FastAPI()\r\n+\r\n+def custom_openapi():\r\n+    if app.openapi_schema:\r\n+        return app.openapi_schema\r\n+    openapi_schema = get_openapi(\r\n+        title=\"Custom title\",\r\n+        version=\"2.5.0\",\r\n+        description=\"This is a very custom OpenAPI schema\",\r\n+        routes=app.routes,\r\n+    )\r\n+    app.openapi_schema = openapi_schema\r\n+    return app.openapi_schema\r\n+\r\n+\r\n+@app.get(\"/\")\r\n+async def read_root():\r\n+    return {\"Hello\": \"World\"}\r\n+\r\n+\r\n+@app.get(\"/items/{item_id}\")\r\n+async def read_item(item_id: int, q: str = None):\r\n+    return {\"item_id\": item_id, \"q\": q}\r\n+\r\n+\r\n+@app.get(\"/disease_abbrev\")\r\n+async def disease_abbrev_endpoint():\r\n+    unique_disease_abbrev = diseases.get_unique_disease_abbrev()\r\n+    return unique_disease_abbrev\r\n+\r\n+\r\n+@app.get(\"/disease_genes\")\r\n+async def disease_genes_endpoint():\r\n+    disease_genes = diseases.get_disease_and_genes()\r\n+    return disease_genes\r\n+\r\n+#создай мне endpoint\r\n+\r\n+\r\n+# Add a new endpoint to get the unique studies for a given disease abbreviation and gene\r\n+@app.get(\"/unique_studies/{disease_abbrev}/{gene}\")\r\n+async def unique_studies_endpoint(disease_abbrev: str, gene: str):\r\n+    unique_studies = overview.get_unique_studies(disease_abbrev, gene)\r\n+    return unique_studies\r\n+\r\n+# Add a new endpoint to get the study design for each study in a list of PMIDs\r\n+@app.get(\"/study_designs\")\r\n+async def study_designs_endpoint(pmid_list: str):\r\n+    study_designs = overview.get_study_design_for_each_study(pmid_list)\r\n+    return study_designs\r\n+\r\n+@app.get(\"/number_of_cases\")\r\n+async def number_of_cases_endpoint(pmid_list: str):\r\n+    number_of_cases = overview.get_number_of_cases_for_each_study(pmid_list)\r\n+    return number_of_cases\r\n+\r\n+#добавь еще один endpoinт для get_unique_studies(disease_abbrev, gene, filter_criteria, aao, country, directory='excel'):\r\n+#все параметры кромe disease_abbrev: str, gene: str не обязательные\r\n+@app.get(\"/unique_studies/{disease_abbrev}/{gene}\")\r\n+async def unique_studies_endpoint(\r\n+    disease_abbrev: str, \r\n+    gene: str, \r\n+    filter_criteria: str = None, \r\n+    aao: str = None, \r\n+    country: str = None\r\n+):\r\n+    unique_studies = overview.get_unique_studies(disease_abbrev, gene, filter_criteria, aao, country)\r\n+    return unique_studies\r\n"
                },
                {
                    "date": 1727974588021,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,169 +48,34 @@\n async def unique_studies_endpoint(disease_abbrev: str, gene: str):\r\n     unique_studies = overview.get_unique_studies(disease_abbrev, gene)\r\n     return unique_studies\r\n \r\n-# Add a new endpoint to get the study design for each study in a list of PMIDs\r\n-@app.get(\"/study_designs\")\r\n-async def study_designs_endpoint(pmid_list: str):\r\n-    study_designs = overview.get_study_design_for_each_study(pmid_list)\r\n-    return study_designs\r\n-\r\n-@app.get(\"/number_of_cases\")\r\n-async def number_of_cases_endpoint(pmid_list: str):\r\n-    number_of_cases = overview.get_number_of_cases_for_each_study(pmid_list)\r\n-    return number_of_cases\r\n-\r\n-#добавь еще один endpoinт для get_unique_studies(disease_abbrev, gene, filter_criteria, aao, country, directory='excel'):\r\n-#все параметры кромe disease_abbrev: str, gene: str не обязательные\r\n @app.get(\"/unique_studies/{disease_abbrev}/{gene}\")\r\n async def unique_studies_endpoint(\r\n     disease_abbrev: str, \r\n     gene: str, \r\n-    filter_criteria: str = None, \r\n-    aao: str = None, \r\n-    country: str = None\r\n+    filter_criteria: str = Query(None, description=\"Filter criteria\"),\r\n+    aao: str = Query(None, description=\"Age at onset\"),\r\n+    country: str = Query(None, description=\"Country\")\r\n ):\r\n     unique_studies = overview.get_unique_studies(disease_abbrev, gene, filter_criteria, aao, country)\r\n     return unique_studies\r\n-from fastapi import FastAPI\r\n-import diseases\r\n-import overview\r\n \r\n-from fastapi.openapi.utils import get_openapi\r\n-\r\n-app = FastAPI()\r\n-\r\n-def custom_openapi():\r\n-    if app.openapi_schema:\r\n-        return app.openapi_schema\r\n-    openapi_schema = get_openapi(\r\n-        title=\"Custom title\",\r\n-        version=\"2.5.0\",\r\n-        description=\"This is a very custom OpenAPI schema\",\r\n-        routes=app.routes,\r\n-    )\r\n-    app.openapi_schema = openapi_schema\r\n-    return app.openapi_schema\r\n-\r\n-\r\n-@app.get(\"/\")\r\n-async def read_root():\r\n-    return {\"Hello\": \"World\"}\r\n-\r\n-\r\n-@app.get(\"/items/{item_id}\")\r\n-async def read_item(item_id: int, q: str = None):\r\n-    return {\"item_id\": item_id, \"q\": q}\r\n-\r\n-\r\n-@app.get(\"/disease_abbrev\")\r\n-async def disease_abbrev_endpoint():\r\n-    unique_disease_abbrev = diseases.get_unique_disease_abbrev()\r\n-    return unique_disease_abbrev\r\n-\r\n-\r\n-@app.get(\"/disease_genes\")\r\n-async def disease_genes_endpoint():\r\n-    disease_genes = diseases.get_disease_and_genes()\r\n-    return disease_genes\r\n-\r\n-#создай мне endpoint\r\n-\r\n-\r\n-# Add a new endpoint to get the unique studies for a given disease abbreviation and gene\r\n-@app.get(\"/unique_studies/{disease_abbrev}/{gene}\")\r\n-async def unique_studies_endpoint(disease_abbrev: str, gene: str):\r\n-    unique_studies = overview.get_unique_studies(disease_abbrev, gene)\r\n-    return unique_studies\r\n-\r\n-# Add a new endpoint to get the study design for each study in a list of PMIDs\r\n @app.get(\"/study_designs\")\r\n-async def study_designs_endpoint(pmid_list: str):\r\n-    study_designs = overview.get_study_design_for_each_study(pmid_list)\r\n+async def study_designs_endpoint(\r\n+    pmid_list: str,\r\n+    filter_criteria: str = Query(None, description=\"Filter criteria\"),\r\n+    aao: str = Query(None, description=\"Age at onset\"),\r\n+    country: str = Query(None, description=\"Country\")\r\n+):\r\n+    study_designs = overview.get_study_design_for_each_study(pmid_list, filter_criteria, aao, country)\r\n     return study_designs\r\n \r\n @app.get(\"/number_of_cases\")\r\n-async def number_of_cases_endpoint(pmid_list: str):\r\n-    number_of_cases = overview.get_number_of_cases_for_each_study(pmid_list)\r\n-    return number_of_cases\r\n-\r\n-#добавь еще один endpoinт для get_unique_studies(disease_abbrev, gene, filter_criteria, aao, country, directory='excel'):\r\n-#все параметры кромe disease_abbrev: str, gene: str не обязательные\r\n-@app.get(\"/unique_studies/{disease_abbrev}/{gene}/{filter_criteria}/{aao}/{country}\")\r\n-async def unique_studies_endpoint(disease_abbrev: str, gene: str, filter_criteria: str = None, aao: str = None, country: str = None):\r\n-    unique_studies = overview.get_unique_studies(disease_abbrev, gene, filter_criteria, aao, country)\r\n-    return unique_studies\r\n-from fastapi import FastAPI\r\n-import diseases\r\n-import overview\r\n-\r\n-from fastapi.openapi.utils import get_openapi\r\n-\r\n-app = FastAPI()\r\n-\r\n-def custom_openapi():\r\n-    if app.openapi_schema:\r\n-        return app.openapi_schema\r\n-    openapi_schema = get_openapi(\r\n-        title=\"Custom title\",\r\n-        version=\"2.5.0\",\r\n-        description=\"This is a very custom OpenAPI schema\",\r\n-        routes=app.routes,\r\n-    )\r\n-    app.openapi_schema = openapi_schema\r\n-    return app.openapi_schema\r\n-\r\n-\r\n-@app.get(\"/\")\r\n-async def read_root():\r\n-    return {\"Hello\": \"World\"}\r\n-\r\n-\r\n-@app.get(\"/items/{item_id}\")\r\n-async def read_item(item_id: int, q: str = None):\r\n-    return {\"item_id\": item_id, \"q\": q}\r\n-\r\n-\r\n-@app.get(\"/disease_abbrev\")\r\n-async def disease_abbrev_endpoint():\r\n-    unique_disease_abbrev = diseases.get_unique_disease_abbrev()\r\n-    return unique_disease_abbrev\r\n-\r\n-\r\n-@app.get(\"/disease_genes\")\r\n-async def disease_genes_endpoint():\r\n-    disease_genes = diseases.get_disease_and_genes()\r\n-    return disease_genes\r\n-\r\n-#создай мне endpoint\r\n-\r\n-\r\n-# Add a new endpoint to get the unique studies for a given disease abbreviation and gene\r\n-@app.get(\"/unique_studies/{disease_abbrev}/{gene}\")\r\n-async def unique_studies_endpoint(disease_abbrev: str, gene: str):\r\n-    unique_studies = overview.get_unique_studies(disease_abbrev, gene)\r\n-    return unique_studies\r\n-\r\n-# Add a new endpoint to get the study design for each study in a list of PMIDs\r\n-@app.get(\"/study_designs\")\r\n-async def study_designs_endpoint(pmid_list: str):\r\n-    study_designs = overview.get_study_design_for_each_study(pmid_list)\r\n-    return study_designs\r\n-\r\n-@app.get(\"/number_of_cases\")\r\n-async def number_of_cases_endpoint(pmid_list: str):\r\n-    number_of_cases = overview.get_number_of_cases_for_each_study(pmid_list)\r\n-    return number_of_cases\r\n-\r\n-#добавь еще один endpoinт для get_unique_studies(disease_abbrev, gene, filter_criteria, aao, country, directory='excel'):\r\n-#все параметры кромe disease_abbrev: str, gene: str не обязательные\r\n-@app.get(\"/unique_studies/{disease_abbrev}/{gene}\")\r\n-async def unique_studies_endpoint(\r\n-    disease_abbrev: str, \r\n-    gene: str, \r\n-    filter_criteria: str = None, \r\n-    aao: str = None, \r\n-    country: str = None\r\n+async def number_of_cases_endpoint(\r\n+    pmid_list: str,\r\n+    filter_criteria: str = Query(None, description=\"Filter criteria\"),\r\n+    aao: str = Query(None, description=\"Age at onset\"),\r\n+    country: str = Query(None, description=\"Country\")\r\n ):\r\n-    unique_studies = overview.get_unique_studies(disease_abbrev, gene, filter_criteria, aao, country)\r\n-    return unique_studies\r\n+    number_of_cases = overview.get_number_of_cases_for_each_study(pmid_list, filter_criteria, aao, country)\r\n+    return number_of_cases\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727974599794,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-from fastapi import FastAPI\r\n+from fastapi import FastAPI,\r\n import diseases\r\n import overview\r\n \r\n from fastapi.openapi.utils import get_openapi\r\n"
                },
                {
                    "date": 1727974604843,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-from fastapi import FastAPI, Qery\r\n+from fastapi import FastAPI, Query\r\n import diseases\r\n import overview\r\n \r\n from fastapi.openapi.utils import get_openapi\r\n"
                },
                {
                    "date": 1727986252612,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,8 @@\n from study_details import get_patients_for_publication\r\n \r\n app = FastAPI()\r\n \r\n-\r\n def custom_openapi():\r\n     if app.openapi_schema:\r\n         return app.openapi_schema\r\n     openapi_schema = get_openapi(\r\n@@ -41,76 +40,67 @@\n async def disease_genes_endpoint():\r\n     disease_genes = diseases.get_disease_and_genes()\r\n     return disease_genes\r\n \r\n+#создай мне endpoint\r\n \r\n-# создай мне endpoint\r\n \r\n-\r\n # Add a new endpoint to get the unique studies for a given disease abbreviation and gene\r\n @app.get(\"/unique_studies/{disease_abbrev}/{gene}\")\r\n async def unique_studies_endpoint(\r\n-    disease_abbrev: str,\r\n-    gene: str,\r\n+    disease_abbrev: str, \r\n+    gene: str, \r\n     filter_criteria: int = Query(None, description=\"Filter criteria\"),\r\n     aao: float = Query(None, description=\"Age at onset\"),\r\n-    country: str = Query(None, description=\"Country\"),\r\n+    country: str = Query(None, description=\"Country\")\r\n ):\r\n     unique_studies = overview.get_unique_studies(\r\n-        disease_abbrev, gene, filter_criteria=filter_criteria, aao=aao, country=country\r\n+        disease_abbrev, \r\n+        gene, \r\n+        filter_criteria=filter_criteria, \r\n+        aao=aao, \r\n+        country=country\r\n     )\r\n     return unique_studies\r\n \r\n-\r\n @app.get(\"/unique_studies/{disease_abbrev}/{gene}\")\r\n async def unique_studies_endpoint(\r\n-    disease_abbrev: str,\r\n-    gene: str,\r\n+    disease_abbrev: str, \r\n+    gene: str, \r\n     filter_criteria: str = Query(None, description=\"Filter criteria\"),\r\n     aao: str = Query(None, description=\"Age at onset\"),\r\n-    country: str = Query(None, description=\"Country\"),\r\n+    country: str = Query(None, description=\"Country\")\r\n ):\r\n-    unique_studies = overview.get_unique_studies(\r\n-        disease_abbrev, gene, filter_criteria, aao, country\r\n-    )\r\n+    unique_studies = overview.get_unique_studies(disease_abbrev, gene, filter_criteria, aao, country)\r\n     return unique_studies\r\n \r\n-\r\n @app.get(\"/study_designs\")\r\n async def study_designs_endpoint(\r\n     pmid_list: str,\r\n     filter_criteria: str = Query(None, description=\"Filter criteria\"),\r\n     aao: str = Query(None, description=\"Age at onset\"),\r\n-    country: str = Query(None, description=\"Country\"),\r\n+    country: str = Query(None, description=\"Country\")\r\n ):\r\n-    study_designs = overview.get_study_design_for_each_study(\r\n-        pmid_list, filter_criteria, aao, country\r\n-    )\r\n+    study_designs = overview.get_study_design_for_each_study(pmid_list, filter_criteria, aao, country)\r\n     return study_designs\r\n \r\n-\r\n @app.get(\"/number_of_cases\")\r\n async def number_of_cases_endpoint(\r\n     pmid_list: str,\r\n     filter_criteria: str = Query(None, description=\"Filter criteria\"),\r\n     aao: str = Query(None, description=\"Age at onset\"),\r\n-    country: str = Query(None, description=\"Country\"),\r\n+    country: str = Query(None, description=\"Country\")\r\n ):\r\n-    number_of_cases = overview.get_number_of_cases_for_each_study(\r\n-        pmid_list, filter_criteria, aao, country\r\n-    )\r\n+    number_of_cases = overview.get_number_of_cases_for_each_study(pmid_list, filter_criteria, aao, country)\r\n     return number_of_cases\r\n \r\n-\r\n @app.get(\"/patients_for_publication\")\r\n async def patients_for_publication_endpoint(\r\n     disease_abbrev: str,\r\n     gene: str,\r\n     pmid: str,\r\n     filter_criteria: str = Query(None, description=\"Filter criteria\"),\r\n     aao: str = Query(None, description=\"Age at onset\"),\r\n-    country: str = Query(None, description=\"Country\"),\r\n+    country: str = Query(None, description=\"Country\")\r\n ):\r\n-    patients = get_patients_for_publication(\r\n-        disease_abbrev, gene, pmid, filter_criteria, aao, country\r\n-    )\r\n-    return patients\r\n+    patients = get_patients_for_publication(disease_abbrev, gene, pmid, filter_criteria, aao, country)\r\n+    return patients\n\\ No newline at end of file\n"
                }
            ],
            "date": 1727974119844,
            "name": "Commit-0",
            "content": "from fastapi import FastAPI\r\nimport diseases\r\nimport overview\r\n\r\nfrom fastapi.openapi.utils import get_openapi\r\n\r\napp = FastAPI()\r\n\r\ndef custom_openapi():\r\n    if app.openapi_schema:\r\n        return app.openapi_schema\r\n    openapi_schema = get_openapi(\r\n        title=\"Custom title\",\r\n        version=\"2.5.0\",\r\n        description=\"This is a very custom OpenAPI schema\",\r\n        routes=app.routes,\r\n    )\r\n    app.openapi_schema = openapi_schema\r\n    return app.openapi_schema\r\n\r\n\r\n@app.get(\"/\")\r\nasync def read_root():\r\n    return {\"Hello\": \"World\"}\r\n\r\n\r\n@app.get(\"/items/{item_id}\")\r\nasync def read_item(item_id: int, q: str = None):\r\n    return {\"item_id\": item_id, \"q\": q}\r\n\r\n\r\n@app.get(\"/disease_abbrev\")\r\nasync def disease_abbrev_endpoint():\r\n    unique_disease_abbrev = diseases.get_unique_disease_abbrev()\r\n    return unique_disease_abbrev\r\n\r\n\r\n@app.get(\"/disease_genes\")\r\nasync def disease_genes_endpoint():\r\n    disease_genes = diseases.get_disease_and_genes()\r\n    return disease_genes\r\n\r\n#создай мне endpoint\r\n\r\n\r\n# Add a new endpoint to get the unique studies for a given disease abbreviation and gene\r\n@app.get(\"/unique_studies/{disease_abbrev}/{gene}\")\r\nasync def unique_studies_endpoint(disease_abbrev: str, gene: str):\r\n    unique_studies = overview.get_unique_studies(disease_abbrev, gene)\r\n    return unique_studies\r\n\r\n# Add a new endpoint to get the study design for each study in a list of PMIDs\r\n@app.get(\"/study_designs\")\r\nasync def study_designs_endpoint(pmid_list: str):\r\n    study_designs = overview.get_study_design_for_each_study(pmid_list)\r\n    return study_designs\r\n\r\n@app.get(\"/number_of_cases\")\r\nasync def number_of_cases_endpoint(pmid_list: str):\r\n    number_of_cases = overview.get_number_of_cases_for_each_study(pmid_list)\r\n    return number_of_cases\r\n\r\n#добавь еще один endpoinт для get_unique_studies(disease_abbrev, gene, filter_criteria, aao, country, directory='excel'):\r\n#все параметры кромe disease_abbrev: str, gene: str не обязательные\r\n@app.get(\"/unique_studies/{disease_abbrev}/{gene}/{filter_criteria}/{aao}/{country}\")\r\nasync def unique_studies_endpoint(disease_abbrev: str, gene: str, filter_criteria: str = None, aao: str = None, country: str = None):\r\n    unique_studies = overview.get_unique_studies(disease_abbrev, gene, filter_criteria, aao, country)\r\n    return unique_studies\r\n"
        }
    ]
}