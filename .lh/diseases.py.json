{
    "sourceFile": "diseases.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1727976665373,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1727976665373,
            "name": "Commit-0",
            "content": "import os\r\nimport pandas as pd\r\n\r\n# Dictionary to store cached data and their modification time\r\n_dataframe_cache = {}\r\n\r\n\r\ndef get_cached_dataframe(file_path):\r\n    global _dataframe_cache\r\n\r\n    # Get the last modification time of the file\r\n    file_mod_time = os.path.getmtime(file_path)\r\n\r\n    # Check if the file is in the cache and if it is up to date\r\n    if file_path in _dataframe_cache and _dataframe_cache[file_path]['mod_time'] == file_mod_time:\r\n        return _dataframe_cache[file_path]['dataframe']\r\n\r\n    # If the file is not cached or it has been modified, read it again\r\n    df = pd.read_excel(file_path)\r\n\r\n    # Cache the dataframe with its modification time\r\n    _dataframe_cache[file_path] = {\r\n        'dataframe': df,\r\n        'mod_time': file_mod_time\r\n    }\r\n\r\n    return df\r\n\r\n\r\ndef get_unique_disease_abbrev(directory='excel'):\r\n    disease_abbrev_set = set()\r\n\r\n    for filename in os.listdir(directory):\r\n        if filename.endswith('.xlsx') or filename.endswith('.xls'):\r\n            file_path = os.path.join(directory, filename)\r\n\r\n            df = get_cached_dataframe(file_path)\r\n\r\n            filtered_df = df[df['ensemble_decision'] == 'IN']\r\n\r\n            # Convert disease_abbrev to uppercase before adding to the set\r\n            disease_abbrev_set.update(filtered_df['disease_abbrev'].str.upper())\r\n\r\n    return list(disease_abbrev_set)\r\n\r\n\r\ndef get_disease_and_genes(directory='excel'):\r\n    disease_genes_list = []\r\n\r\n    # Iterate through all files in the specified directory\r\n    for filename in os.listdir(directory):\r\n        if filename.endswith('.xlsx') or filename.endswith('.xls'):\r\n            file_path = os.path.join(directory, filename)\r\n\r\n            # Read the Excel file using the cache function\r\n            df = get_cached_dataframe(file_path)\r\n\r\n            # Filter the rows where 'ensemble_decision' is 'IN'\r\n            filtered_df = df[df['ensemble_decision'] == 'IN']\r\n\r\n            # Iterate through each row in the filtered DataFrame\r\n            for _, row in filtered_df.iterrows():\r\n                genes = []\r\n\r\n                # Check and include gene1\r\n                if pd.notna(row['gene1']) and row['gene1'] != '-99' and row['gene1'] != -99:\r\n                    genes.append(row['gene1'])\r\n\r\n                # Check and include gene2\r\n                if pd.notna(row['gene2']) and row['gene2'] != '-99' and row['gene2'] != -99:\r\n                    genes.append(row['gene2'])\r\n\r\n                # Check and include gene3\r\n                if pd.notna(row['gene3']) and row['gene3'] != '-99' and row['gene3'] != -99:\r\n                    genes.append(row['gene3'])\r\n\r\n                # Append the dictionary with non-blank and non '-99' gene values\r\n                disease_genes_list.append({\r\n                    'disease_abbrev': row['disease_abbrev'],\r\n                    'genes': genes\r\n                })\r\n\r\n    return disease_genes_list\r\n"
        }
    ]
}