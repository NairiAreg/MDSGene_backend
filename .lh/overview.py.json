{
    "sourceFile": "overview.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 19,
            "patches": [
                {
                    "date": 1727974565708,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1727974667621,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,16 +69,40 @@\n             # Only apply the filter if filter_criteria is provided\r\n             if filter_criteria is not None:\r\n                 df = apply_filter(df, filter_criteria, aao, country)\r\n             \r\n-            filtered_df = df[(df['disease_abbrev'] == disease_abbrev) & (df['gene1'] == gene)]\r\n-            filtered_df = filtered_df.append(df[(df['disease_abbrev'] == disease_abbrev) & (df['gene2'] == gene)])\r\n-            filtered_df = filtered_df.append(df[(df['disease_abbrev'] == disease_abbrev) & (df['gene3'] == gene)])\r\n+            # Use pd.concat instead of append\r\n+            filtered_df = pd.concat([\r\n+                df[(df['disease_abbrev'] == disease_abbrev) & (df['gene1'] == gene)],\r\n+                df[(df['disease_abbrev'] == disease_abbrev) & (df['gene2'] == gene)],\r\n+                df[(df['disease_abbrev'] == disease_abbrev) & (df['gene3'] == gene)]\r\n+            ])\r\n \r\n             for pmid in filtered_df['pmid'].unique():\r\n                 study_df = filtered_df[filtered_df['pmid'] == pmid]\r\n-                # ... (rest of the function remains the same)\r\n+                study_design = study_df['study_design'].iloc[0]\r\n+                number_of_cases = len(study_df)\r\n+                ethnicity = study_df['ethnicity'].iloc[0]\r\n+                proportion_of_male_patients = len(study_df[study_df['sex'] == 'male']) / number_of_cases\r\n+                mean_age_at_onset = study_df['aao'].mean()\r\n+                std_dev_age_at_onset = study_df['aao'].std()\r\n+                mutations = {\r\n+                    'mut1_p': study_df['mut1_genotype'].iloc[0],\r\n+                    'mut2_p': study_df['mut2_genotype'].iloc[0],\r\n+                    'mut3_p': study_df['mut3_genotype'].iloc[0]\r\n+                }\r\n \r\n+                results.append({\r\n+                    'pmid': pmid,\r\n+                    'study_design': study_design,\r\n+                    'number_of_cases': number_of_cases,\r\n+                    'ethnicity': ethnicity,\r\n+                    'proportion_of_male_patients': proportion_of_male_patients,\r\n+                    'mean_age_at_onset': mean_age_at_onset,\r\n+                    'std_dev_age_at_onset': std_dev_age_at_onset,\r\n+                    'mutations': mutations\r\n+                })\r\n+\r\n     return results\r\n \r\n # Update other functions to handle optional parameters as well\r\n def get_study_design_for_each_study(pmids, filter_criteria=None, aao=None, country=None, directory='excel'):\r\n"
                },
                {
                    "date": 1727974740811,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,10 +10,22 @@\n \r\n     if file_path in _dataframe_cache and _dataframe_cache[file_path]['mod_time'] == file_mod_time:\r\n         return _dataframe_cache[file_path]['dataframe']\r\n \r\n-    df = pd.read_excel(file_path)\r\n+    # Determine the file extension\r\n+    _, file_extension = os.path.splitext(file_path)\r\n+    \r\n+    # Choose the appropriate engine based on the file extension\r\n+    if file_extension.lower() == '.xlsx':\r\n+        engine = 'openpyxl'\r\n+    elif file_extension.lower() == '.xls':\r\n+        engine = 'xlrd'\r\n+    else:\r\n+        raise ValueError(f\"Unsupported file extension: {file_extension}\")\r\n \r\n+    # Read the Excel file with the specified engine\r\n+    df = pd.read_excel(file_path, engine=engine)\r\n+\r\n     _dataframe_cache[file_path] = {\r\n         'dataframe': df,\r\n         'mod_time': file_mod_time\r\n     }\r\n"
                },
                {
                    "date": 1727974752193,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,47 +74,15 @@\n \r\n     for filename in os.listdir(directory):\r\n         if filename.endswith('.xlsx') or filename.endswith('.xls'):\r\n             file_path = os.path.join(directory, filename)\r\n-            df = get_cached_dataframe(file_path)\r\n-            df = df[df['ensemble_decision'] == 'IN']\r\n-            \r\n-            # Only apply the filter if filter_criteria is provided\r\n-            if filter_criteria is not None:\r\n-                df = apply_filter(df, filter_criteria, aao, country)\r\n-            \r\n-            # Use pd.concat instead of append\r\n-            filtered_df = pd.concat([\r\n-                df[(df['disease_abbrev'] == disease_abbrev) & (df['gene1'] == gene)],\r\n-                df[(df['disease_abbrev'] == disease_abbrev) & (df['gene2'] == gene)],\r\n-                df[(df['disease_abbrev'] == disease_abbrev) & (df['gene3'] == gene)]\r\n-            ])\r\n+            try:\r\n+                df = get_cached_dataframe(file_path)\r\n+                # ... (rest of the function remains the same)\r\n+            except Exception as e:\r\n+                print(f\"Error reading file {filename}: {str(e)}\")\r\n+                continue\r\n \r\n-            for pmid in filtered_df['pmid'].unique():\r\n-                study_df = filtered_df[filtered_df['pmid'] == pmid]\r\n-                study_design = study_df['study_design'].iloc[0]\r\n-                number_of_cases = len(study_df)\r\n-                ethnicity = study_df['ethnicity'].iloc[0]\r\n-                proportion_of_male_patients = len(study_df[study_df['sex'] == 'male']) / number_of_cases\r\n-                mean_age_at_onset = study_df['aao'].mean()\r\n-                std_dev_age_at_onset = study_df['aao'].std()\r\n-                mutations = {\r\n-                    'mut1_p': study_df['mut1_genotype'].iloc[0],\r\n-                    'mut2_p': study_df['mut2_genotype'].iloc[0],\r\n-                    'mut3_p': study_df['mut3_genotype'].iloc[0]\r\n-                }\r\n-\r\n-                results.append({\r\n-                    'pmid': pmid,\r\n-                    'study_design': study_design,\r\n-                    'number_of_cases': number_of_cases,\r\n-                    'ethnicity': ethnicity,\r\n-                    'proportion_of_male_patients': proportion_of_male_patients,\r\n-                    'mean_age_at_onset': mean_age_at_onset,\r\n-                    'std_dev_age_at_onset': std_dev_age_at_onset,\r\n-                    'mutations': mutations\r\n-                })\r\n-\r\n     return results\r\n \r\n # Update other functions to handle optional parameters as well\r\n def get_study_design_for_each_study(pmids, filter_criteria=None, aao=None, country=None, directory='excel'):\r\n"
                },
                {
                    "date": 1727974819000,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,15 +74,47 @@\n \r\n     for filename in os.listdir(directory):\r\n         if filename.endswith('.xlsx') or filename.endswith('.xls'):\r\n             file_path = os.path.join(directory, filename)\r\n-            try:\r\n-                df = get_cached_dataframe(file_path)\r\n-                # ... (rest of the function remains the same)\r\n-            except Exception as e:\r\n-                print(f\"Error reading file {filename}: {str(e)}\")\r\n-                continue\r\n+            df = get_cached_dataframe(file_path)\r\n+            df = df[df['ensemble_decision'] == 'IN']\r\n+            \r\n+            # Only apply the filter if filter_criteria is provided\r\n+            if filter_criteria is not None:\r\n+                df = apply_filter(df, filter_criteria, aao, country)\r\n+            \r\n+            # Use pd.concat instead of append\r\n+            filtered_df = pd.concat([\r\n+                df[(df['disease_abbrev'] == disease_abbrev) & (df['gene1'] == gene)],\r\n+                df[(df['disease_abbrev'] == disease_abbrev) & (df['gene2'] == gene)],\r\n+                df[(df['disease_abbrev'] == disease_abbrev) & (df['gene3'] == gene)]\r\n+            ])\r\n \r\n+            for pmid in filtered_df['pmid'].unique():\r\n+                study_df = filtered_df[filtered_df['pmid'] == pmid]\r\n+                study_design = study_df['study_design'].iloc[0]\r\n+                number_of_cases = len(study_df)\r\n+                ethnicity = study_df['ethnicity'].iloc[0]\r\n+                proportion_of_male_patients = len(study_df[study_df['sex'] == 'male']) / number_of_cases\r\n+                mean_age_at_onset = study_df['aao'].mean()\r\n+                std_dev_age_at_onset = study_df['aao'].std()\r\n+                mutations = {\r\n+                    'mut1_p': study_df['mut1_genotype'].iloc[0],\r\n+                    'mut2_p': study_df['mut2_genotype'].iloc[0],\r\n+                    'mut3_p': study_df['mut3_genotype'].iloc[0]\r\n+                }\r\n+\r\n+                results.append({\r\n+                    'pmid': pmid,\r\n+                    'study_design': study_design,\r\n+                    'number_of_cases': number_of_cases,\r\n+                    'ethnicity': ethnicity,\r\n+                    'proportion_of_male_patients': proportion_of_male_patients,\r\n+                    'mean_age_at_onset': mean_age_at_onset,\r\n+                    'std_dev_age_at_onset': std_dev_age_at_onset,\r\n+                    'mutations': mutations\r\n+                })\r\n+\r\n     return results\r\n \r\n # Update other functions to handle optional parameters as well\r\n def get_study_design_for_each_study(pmids, filter_criteria=None, aao=None, country=None, directory='excel'):\r\n"
                },
                {
                    "date": 1727974827362,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,47 +74,15 @@\n \r\n     for filename in os.listdir(directory):\r\n         if filename.endswith('.xlsx') or filename.endswith('.xls'):\r\n             file_path = os.path.join(directory, filename)\r\n-            df = get_cached_dataframe(file_path)\r\n-            df = df[df['ensemble_decision'] == 'IN']\r\n-            \r\n-            # Only apply the filter if filter_criteria is provided\r\n-            if filter_criteria is not None:\r\n-                df = apply_filter(df, filter_criteria, aao, country)\r\n-            \r\n-            # Use pd.concat instead of append\r\n-            filtered_df = pd.concat([\r\n-                df[(df['disease_abbrev'] == disease_abbrev) & (df['gene1'] == gene)],\r\n-                df[(df['disease_abbrev'] == disease_abbrev) & (df['gene2'] == gene)],\r\n-                df[(df['disease_abbrev'] == disease_abbrev) & (df['gene3'] == gene)]\r\n-            ])\r\n+            try:\r\n+                df = get_cached_dataframe(file_path)\r\n+                # ... (rest of the function remains the same)\r\n+            except Exception as e:\r\n+                print(f\"Error reading file {filename}: {str(e)}\")\r\n+                continue\r\n \r\n-            for pmid in filtered_df['pmid'].unique():\r\n-                study_df = filtered_df[filtered_df['pmid'] == pmid]\r\n-                study_design = study_df['study_design'].iloc[0]\r\n-                number_of_cases = len(study_df)\r\n-                ethnicity = study_df['ethnicity'].iloc[0]\r\n-                proportion_of_male_patients = len(study_df[study_df['sex'] == 'male']) / number_of_cases\r\n-                mean_age_at_onset = study_df['aao'].mean()\r\n-                std_dev_age_at_onset = study_df['aao'].std()\r\n-                mutations = {\r\n-                    'mut1_p': study_df['mut1_genotype'].iloc[0],\r\n-                    'mut2_p': study_df['mut2_genotype'].iloc[0],\r\n-                    'mut3_p': study_df['mut3_genotype'].iloc[0]\r\n-                }\r\n-\r\n-                results.append({\r\n-                    'pmid': pmid,\r\n-                    'study_design': study_design,\r\n-                    'number_of_cases': number_of_cases,\r\n-                    'ethnicity': ethnicity,\r\n-                    'proportion_of_male_patients': proportion_of_male_patients,\r\n-                    'mean_age_at_onset': mean_age_at_onset,\r\n-                    'std_dev_age_at_onset': std_dev_age_at_onset,\r\n-                    'mutations': mutations\r\n-                })\r\n-\r\n     return results\r\n \r\n # Update other functions to handle optional parameters as well\r\n def get_study_design_for_each_study(pmids, filter_criteria=None, aao=None, country=None, directory='excel'):\r\n"
                },
                {
                    "date": 1727974845818,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,10 +75,45 @@\n     for filename in os.listdir(directory):\r\n         if filename.endswith('.xlsx') or filename.endswith('.xls'):\r\n             file_path = os.path.join(directory, filename)\r\n             try:\r\n-                df = get_cached_dataframe(file_path)\r\n-                # ... (rest of the function remains the same)\r\n+df = df[df['ensemble_decision'] == 'IN']\r\n+            \r\n+            # Only apply the filter if filter_criteria is provided\r\n+            if filter_criteria is not None:\r\n+                df = apply_filter(df, filter_criteria, aao, country)\r\n+            \r\n+            # Use pd.concat instead of append\r\n+            filtered_df = pd.concat([\r\n+                df[(df['disease_abbrev'] == disease_abbrev) & (df['gene1'] == gene)],\r\n+                df[(df['disease_abbrev'] == disease_abbrev) & (df['gene2'] == gene)],\r\n+                df[(df['disease_abbrev'] == disease_abbrev) & (df['gene3'] == gene)]\r\n+            ])\r\n+\r\n+            for pmid in filtered_df['pmid'].unique():\r\n+                study_df = filtered_df[filtered_df['pmid'] == pmid]\r\n+                study_design = study_df['study_design'].iloc[0]\r\n+                number_of_cases = len(study_df)\r\n+                ethnicity = study_df['ethnicity'].iloc[0]\r\n+                proportion_of_male_patients = len(study_df[study_df['sex'] == 'male']) / number_of_cases\r\n+                mean_age_at_onset = study_df['aao'].mean()\r\n+                std_dev_age_at_onset = study_df['aao'].std()\r\n+                mutations = {\r\n+                    'mut1_p': study_df['mut1_genotype'].iloc[0],\r\n+                    'mut2_p': study_df['mut2_genotype'].iloc[0],\r\n+                    'mut3_p': study_df['mut3_genotype'].iloc[0]\r\n+                }\r\n+\r\n+                results.append({\r\n+                    'pmid': pmid,\r\n+                    'study_design': study_design,\r\n+                    'number_of_cases': number_of_cases,\r\n+                    'ethnicity': ethnicity,\r\n+                    'proportion_of_male_patients': proportion_of_male_patients,\r\n+                    'mean_age_at_onset': mean_age_at_onset,\r\n+                    'std_dev_age_at_onset': std_dev_age_at_onset,\r\n+                    'mutations': mutations\r\n+                })\r\n             except Exception as e:\r\n                 print(f\"Error reading file {filename}: {str(e)}\")\r\n                 continue\r\n \r\n"
                },
                {
                    "date": 1727974851728,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,10 +75,10 @@\n     for filename in os.listdir(directory):\r\n         if filename.endswith('.xlsx') or filename.endswith('.xls'):\r\n             file_path = os.path.join(directory, filename)\r\n             try:\r\n-df = df[df['ensemble_decision'] == 'IN']\r\n-            \r\n+            df = df[df['ensemble_decision'] == 'IN']\r\n+\r\n             # Only apply the filter if filter_criteria is provided\r\n             if filter_criteria is not None:\r\n                 df = apply_filter(df, filter_criteria, aao, country)\r\n             \r\n"
                },
                {
                    "date": 1727974936851,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,52 +68,54 @@\n             df = df[df['country'] == country_map[country]]\r\n \r\n     return df\r\n \r\n-def get_unique_studies(disease_abbrev, gene, filter_criteria=None, aao=None, country=None, directory='excel'):\r\n+ddef get_unique_studies(disease_abbrev, gene, filter_criteria=None, aao=None, country=None, directory='excel'):\r\n     results = []\r\n \r\n     for filename in os.listdir(directory):\r\n         if filename.endswith('.xlsx') or filename.endswith('.xls'):\r\n             file_path = os.path.join(directory, filename)\r\n             try:\r\n-            df = df[df['ensemble_decision'] == 'IN']\r\n+                df = get_cached_dataframe(file_path)\r\n+                df = df[df['ensemble_decision'] == 'IN']\r\n+                \r\n+                # Only apply the filter if filter_criteria is provided\r\n+                if filter_criteria is not None:\r\n+                    df = apply_filter(df, filter_criteria, aao, country)\r\n+                \r\n+                # Use pd.concat instead of append\r\n+                filtered_df = pd.concat([\r\n+                    df[(df['disease_abbrev'] == disease_abbrev) & (df['gene1'] == gene)],\r\n+                    df[(df['disease_abbrev'] == disease_abbrev) & (df['gene2'] == gene)],\r\n+                    df[(df['disease_abbrev'] == disease_abbrev) & (df['gene3'] == gene)]\r\n+                ])\r\n \r\n-            # Only apply the filter if filter_criteria is provided\r\n-            if filter_criteria is not None:\r\n-                df = apply_filter(df, filter_criteria, aao, country)\r\n-            \r\n-            # Use pd.concat instead of append\r\n-            filtered_df = pd.concat([\r\n-                df[(df['disease_abbrev'] == disease_abbrev) & (df['gene1'] == gene)],\r\n-                df[(df['disease_abbrev'] == disease_abbrev) & (df['gene2'] == gene)],\r\n-                df[(df['disease_abbrev'] == disease_abbrev) & (df['gene3'] == gene)]\r\n-            ])\r\n+                for pmid in filtered_df['pmid'].unique():\r\n+                    study_df = filtered_df[filtered_df['pmid'] == pmid]\r\n+                    study_design = study_df['study_design'].iloc[0]\r\n+                    number_of_cases = len(study_df)\r\n+                    ethnicity = study_df['ethnicity'].iloc[0]\r\n+                    proportion_of_male_patients = len(study_df[study_df['sex'] == 'male']) / number_of_cases\r\n+                    mean_age_at_onset = study_df['aao'].mean()\r\n+                    std_dev_age_at_onset = study_df['aao'].std()\r\n+                    mutations = {\r\n+                        'mut1_p': study_df['mut1_genotype'].iloc[0],\r\n+                        'mut2_p': study_df['mut2_genotype'].iloc[0],\r\n+                        'mut3_p': study_df['mut3_genotype'].iloc[0]\r\n+                    }\r\n \r\n-            for pmid in filtered_df['pmid'].unique():\r\n-                study_df = filtered_df[filtered_df['pmid'] == pmid]\r\n-                study_design = study_df['study_design'].iloc[0]\r\n-                number_of_cases = len(study_df)\r\n-                ethnicity = study_df['ethnicity'].iloc[0]\r\n-                proportion_of_male_patients = len(study_df[study_df['sex'] == 'male']) / number_of_cases\r\n-                mean_age_at_onset = study_df['aao'].mean()\r\n-                std_dev_age_at_onset = study_df['aao'].std()\r\n-                mutations = {\r\n-                    'mut1_p': study_df['mut1_genotype'].iloc[0],\r\n-                    'mut2_p': study_df['mut2_genotype'].iloc[0],\r\n-                    'mut3_p': study_df['mut3_genotype'].iloc[0]\r\n-                }\r\n+                    results.append({\r\n+                        'pmid': pmid,\r\n+                        'study_design': study_design,\r\n+                        'number_of_cases': number_of_cases,\r\n+                        'ethnicity': ethnicity,\r\n+                        'proportion_of_male_patients': proportion_of_male_patients,\r\n+                        'mean_age_at_onset': mean_age_at_onset,\r\n+                        'std_dev_age_at_onset': std_dev_age_at_onset,\r\n+                        'mutations': mutations\r\n+                    })\r\n \r\n-                results.append({\r\n-                    'pmid': pmid,\r\n-                    'study_design': study_design,\r\n-                    'number_of_cases': number_of_cases,\r\n-                    'ethnicity': ethnicity,\r\n-                    'proportion_of_male_patients': proportion_of_male_patients,\r\n-                    'mean_age_at_onset': mean_age_at_onset,\r\n-                    'std_dev_age_at_onset': std_dev_age_at_onset,\r\n-                    'mutations': mutations\r\n-                })\r\n             except Exception as e:\r\n                 print(f\"Error reading file {filename}: {str(e)}\")\r\n                 continue\r\n \r\n"
                },
                {
                    "date": 1727975006773,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,12 +68,22 @@\n             df = df[df['country'] == country_map[country]]\r\n \r\n     return df\r\n \r\n-ddef get_unique_studies(disease_abbrev, gene, filter_criteria=None, aao=None, country=None, directory='excel'):\r\n+def safe_get(df, column, index, default=None):\r\n+    try:\r\n+        value = df[column].iloc[index]\r\n+        return default if pd.isna(value) else value\r\n+    except:\r\n+        return default\r\n+\r\n+def get_unique_studies(disease_abbrev, gene, filter_criteria=None, aao=None, country=None, directory='excel'):\r\n     results = []\r\n \r\n     for filename in os.listdir(directory):\r\n+        if filename.startswith('.~') or filename.startswith('~$'):\r\n+            continue  # Skip temporary Excel files\r\n+        \r\n         if filename.endswith('.xlsx') or filename.endswith('.xls'):\r\n             file_path = os.path.join(directory, filename)\r\n             try:\r\n                 df = get_cached_dataframe(file_path)\r\n@@ -90,31 +100,52 @@\n                     df[(df['disease_abbrev'] == disease_abbrev) & (df['gene3'] == gene)]\r\n                 ])\r\n \r\n                 for pmid in filtered_df['pmid'].unique():\r\n-                    study_df = filtered_df[filtered_df['pmid'] == pmid]\r\n-                    study_design = study_df['study_design'].iloc[0]\r\n-                    number_of_cases = len(study_df)\r\n-                    ethnicity = study_df['ethnicity'].iloc[0]\r\n-                    proportion_of_male_patients = len(study_df[study_df['sex'] == 'male']) / number_of_cases\r\n-                    mean_age_at_onset = study_df['aao'].mean()\r\n-                    std_dev_age_at_onset = study_df['aao'].std()\r\n-                    mutations = {\r\n-                        'mut1_p': study_df['mut1_genotype'].iloc[0],\r\n-                        'mut2_p': study_df['mut2_genotype'].iloc[0],\r\n-                        'mut3_p': study_df['mut3_genotype'].iloc[0]\r\n-                    }\r\n+                    try:\r\n+                        study_df = filtered_df[filtered_df['pmid'] == pmid]\r\n+                        number_of_cases = len(study_df)\r\n+                        \r\n+                        # Use the safe_get function to retrieve values\r\n+                        study_design = safe_get(study_df, 'study_design', 0, 'Unknown')\r\n+                        ethnicity = safe_get(study_df, 'ethnicity', 0, 'Unknown')\r\n+                        \r\n+                        # Handle potential division by zero\r\n+                        proportion_of_male_patients = (\r\n+                            len(study_df[study_df['sex'] == 'male']) / number_of_cases \r\n+                            if number_of_cases > 0 else 0\r\n+                        )\r\n+                        \r\n+                        # Handle potential NaN values\r\n+                        mean_age_at_onset = study_df['aao'].mean()\r\n+                        mean_age_at_onset = (\r\n+                            float(mean_age_at_onset) if not pd.isna(mean_age_at_onset) else None\r\n+                        )\r\n+                        \r\n+                        std_dev_age_at_onset = study_df['aao'].std()\r\n+                        std_dev_age_at_onset = (\r\n+                            float(std_dev_age_at_onset) if not pd.isna(std_dev_age_at_onset) else None\r\n+                        )\r\n+                        \r\n+                        mutations = {\r\n+                            'mut1_p': safe_get(study_df, 'mut1_genotype', 0, 'Unknown'),\r\n+                            'mut2_p': safe_get(study_df, 'mut2_genotype', 0, 'Unknown'),\r\n+                            'mut3_p': safe_get(study_df, 'mut3_genotype', 0, 'Unknown')\r\n+                        }\r\n \r\n-                    results.append({\r\n-                        'pmid': pmid,\r\n-                        'study_design': study_design,\r\n-                        'number_of_cases': number_of_cases,\r\n-                        'ethnicity': ethnicity,\r\n-                        'proportion_of_male_patients': proportion_of_male_patients,\r\n-                        'mean_age_at_onset': mean_age_at_onset,\r\n-                        'std_dev_age_at_onset': std_dev_age_at_onset,\r\n-                        'mutations': mutations\r\n-                    })\r\n+                        results.append({\r\n+                            'pmid': pmid,\r\n+                            'study_design': study_design,\r\n+                            'number_of_cases': number_of_cases,\r\n+                            'ethnicity': ethnicity,\r\n+                            'proportion_of_male_patients': proportion_of_male_patients,\r\n+                            'mean_age_at_onset': mean_age_at_onset,\r\n+                            'std_dev_age_at_onset': std_dev_age_at_onset,\r\n+                            'mutations': mutations\r\n+                        })\r\n+                    except Exception as e:\r\n+                        print(f\"Error processing PMID {pmid} in file {filename}: {str(e)}\")\r\n+                        continue\r\n \r\n             except Exception as e:\r\n                 print(f\"Error reading file {filename}: {str(e)}\")\r\n                 continue\r\n"
                },
                {
                    "date": 1727975098970,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,12 +68,28 @@\n             df = df[df['country'] == country_map[country]]\r\n \r\n     return df\r\n \r\n+_dataframe_cache = {}\r\n+\r\n+class NumpyEncoder(json.JSONEncoder):\r\n+    def default(self, obj):\r\n+        if isinstance(obj, np.integer):\r\n+            return int(obj)\r\n+        elif isinstance(obj, np.floating):\r\n+            return float(obj)\r\n+        elif isinstance(obj, np.ndarray):\r\n+            return obj.tolist()\r\n+        return super(NumpyEncoder, self).default(obj)\r\n+\r\n def safe_get(df, column, index, default=None):\r\n     try:\r\n         value = df[column].iloc[index]\r\n-        return default if pd.isna(value) else value\r\n+        if pd.isna(value):\r\n+            return default\r\n+        if isinstance(value, (np.integer, np.floating)):\r\n+            return value.item()\r\n+        return value\r\n     except:\r\n         return default\r\n \r\n def get_unique_studies(disease_abbrev, gene, filter_criteria=None, aao=None, country=None, directory='excel'):\r\n@@ -104,19 +120,16 @@\n                     try:\r\n                         study_df = filtered_df[filtered_df['pmid'] == pmid]\r\n                         number_of_cases = len(study_df)\r\n                         \r\n-                        # Use the safe_get function to retrieve values\r\n                         study_design = safe_get(study_df, 'study_design', 0, 'Unknown')\r\n                         ethnicity = safe_get(study_df, 'ethnicity', 0, 'Unknown')\r\n                         \r\n-                        # Handle potential division by zero\r\n                         proportion_of_male_patients = (\r\n                             len(study_df[study_df['sex'] == 'male']) / number_of_cases \r\n                             if number_of_cases > 0 else 0\r\n                         )\r\n                         \r\n-                        # Handle potential NaN values\r\n                         mean_age_at_onset = study_df['aao'].mean()\r\n                         mean_age_at_onset = (\r\n                             float(mean_age_at_onset) if not pd.isna(mean_age_at_onset) else None\r\n                         )\r\n@@ -131,18 +144,22 @@\n                             'mut2_p': safe_get(study_df, 'mut2_genotype', 0, 'Unknown'),\r\n                             'mut3_p': safe_get(study_df, 'mut3_genotype', 0, 'Unknown')\r\n                         }\r\n \r\n-                        results.append({\r\n-                            'pmid': pmid,\r\n+                        result = {\r\n+                            'pmid': int(pmid) if isinstance(pmid, (np.integer, np.floating)) else pmid,\r\n                             'study_design': study_design,\r\n-                            'number_of_cases': number_of_cases,\r\n+                            'number_of_cases': int(number_of_cases),\r\n                             'ethnicity': ethnicity,\r\n-                            'proportion_of_male_patients': proportion_of_male_patients,\r\n+                            'proportion_of_male_patients': float(proportion_of_male_patients),\r\n                             'mean_age_at_onset': mean_age_at_onset,\r\n                             'std_dev_age_at_onset': std_dev_age_at_onset,\r\n                             'mutations': mutations\r\n-                        })\r\n+                        }\r\n+\r\n+                        # Convert numpy types to Python types\r\n+                        result = json.loads(json.dumps(result, cls=NumpyEncoder))\r\n+                        results.append(result)\r\n                     except Exception as e:\r\n                         print(f\"Error processing PMID {pmid} in file {filename}: {str(e)}\")\r\n                         continue\r\n \r\n"
                },
                {
                    "date": 1727975109289,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,8 @@\n import pandas as pd\r\n+import numpy as np\r\n import os\r\n+import json\r\n \r\n _dataframe_cache = {}\r\n \r\n def get_cached_dataframe(file_path):\r\n"
                },
                {
                    "date": 1727975209749,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -141,11 +141,11 @@\n                             float(std_dev_age_at_onset) if not pd.isna(std_dev_age_at_onset) else None\r\n                         )\r\n                         \r\n                         mutations = {\r\n-                            'mut1_p': safe_get(study_df, 'mut1_genotype', 0, 'Unknown'),\r\n-                            'mut2_p': safe_get(study_df, 'mut2_genotype', 0, 'Unknown'),\r\n-                            'mut3_p': safe_get(study_df, 'mut3_genotype', 0, 'Unknown')\r\n+                            'mut1_p': safe_get(study_df, 'mut1_genotyp', 0, 'Unknown'),\r\n+                            'mut2_p': safe_get(study_df, 'mut2_genotyp', 0, 'Unknown'),\r\n+                            'mut3_p': safe_get(study_df, 'mut3_genotyp', 0, 'Unknown')\r\n                         }\r\n \r\n                         result = {\r\n                             'pmid': int(pmid) if isinstance(pmid, (np.integer, np.floating)) else pmid,\r\n"
                },
                {
                    "date": 1727975326391,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -141,11 +141,14 @@\n                             float(std_dev_age_at_onset) if not pd.isna(std_dev_age_at_onset) else None\r\n                         )\r\n                         \r\n                         mutations = {\r\n-                            'mut1_p': safe_get(study_df, 'mut1_genotyp', 0, 'Unknown'),\r\n-                            'mut2_p': safe_get(study_df, 'mut2_genotyp', 0, 'Unknown'),\r\n-                            'mut3_p': safe_get(study_df, 'mut3_genotyp', 0, 'Unknown')\r\n+                            'mut1_p': safe_get(study_df, 'mut1_p', 0, 'Unknown'),\r\n+                            'mut2_p': safe_get(study_df, 'mut2_p', 0, 'Unknown'),\r\n+                            'mut3_p': safe_get(study_df, 'mut3_p', 0, 'Unknown')\r\n+                            'mut1_p': safe_get(study_df, 'mut1_p', 0, 'Unknown'),\r\n+                            'mut2_p': safe_get(study_df, 'mut2_p', 0, 'Unknown'),\r\n+                            'mut3_p': safe_get(study_df, 'mut3_p', 0, 'Unknown')\r\n                         }\r\n \r\n                         result = {\r\n                             'pmid': int(pmid) if isinstance(pmid, (np.integer, np.floating)) else pmid,\r\n"
                },
                {
                    "date": 1727975332442,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -144,11 +144,11 @@\n                         mutations = {\r\n                             'mut1_p': safe_get(study_df, 'mut1_p', 0, 'Unknown'),\r\n                             'mut2_p': safe_get(study_df, 'mut2_p', 0, 'Unknown'),\r\n                             'mut3_p': safe_get(study_df, 'mut3_p', 0, 'Unknown')\r\n-                            'mut1_p': safe_get(study_df, 'mut1_p', 0, 'Unknown'),\r\n-                            'mut2_p': safe_get(study_df, 'mut2_p', 0, 'Unknown'),\r\n-                            'mut3_p': safe_get(study_df, 'mut3_p', 0, 'Unknown')\r\n+                            'mut1_': safe_get(study_df, 'mut1_p', 0, 'Unknown'),\r\n+                            'mut2_': safe_get(study_df, 'mut2_p', 0, 'Unknown'),\r\n+                            'mut3_': safe_get(study_df, 'mut3_p', 0, 'Unknown')\r\n                         }\r\n \r\n                         result = {\r\n                             'pmid': int(pmid) if isinstance(pmid, (np.integer, np.floating)) else pmid,\r\n"
                },
                {
                    "date": 1727975338572,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,213 @@\n+import pandas as pd\r\n+import numpy as np\r\n+import os\r\n+import json\r\n+\r\n+_dataframe_cache = {}\r\n+\r\n+def get_cached_dataframe(file_path):\r\n+    global _dataframe_cache\r\n+\r\n+    file_mod_time = os.path.getmtime(file_path)\r\n+\r\n+    if file_path in _dataframe_cache and _dataframe_cache[file_path]['mod_time'] == file_mod_time:\r\n+        return _dataframe_cache[file_path]['dataframe']\r\n+\r\n+    # Determine the file extension\r\n+    _, file_extension = os.path.splitext(file_path)\r\n+    \r\n+    # Choose the appropriate engine based on the file extension\r\n+    if file_extension.lower() == '.xlsx':\r\n+        engine = 'openpyxl'\r\n+    elif file_extension.lower() == '.xls':\r\n+        engine = 'xlrd'\r\n+    else:\r\n+        raise ValueError(f\"Unsupported file extension: {file_extension}\")\r\n+\r\n+    # Read the Excel file with the specified engine\r\n+    df = pd.read_excel(file_path, engine=engine)\r\n+\r\n+    _dataframe_cache[file_path] = {\r\n+        'dataframe': df,\r\n+        'mod_time': file_mod_time\r\n+    }\r\n+\r\n+    return df\r\n+\r\n+def apply_filter(df, filter_criteria, aao, country):\r\n+    if filter_criteria == 1:\r\n+        df = df[df['index_pat'] == 'yes']\r\n+    elif filter_criteria == 2 and aao is not None:\r\n+        df = df[df['aao'] < aao]\r\n+    elif filter_criteria == 3 and aao is not None:\r\n+        df = df[df['aao'] >= aao]\r\n+    elif filter_criteria == 4:\r\n+        df = df[df['sex'] == 'female']\r\n+    elif filter_criteria == 5:\r\n+        df = df[df['sex'] == 'male']\r\n+    elif filter_criteria == 6:\r\n+        df = df[(df['mut1_genotype'] == 'hom') | (df['mut2_genotype'] == 'hom') | (df['mut3_genotype'] == 'hom')]\r\n+    elif filter_criteria == 7:\r\n+        df = df[(df['mut1_genotype'] == 'het') | (df['mut2_genotype'] == 'het') | (df['mut3_genotype'] == 'het')]\r\n+    elif filter_criteria == 8:\r\n+        df = df[(df['mut1_genotype'] == 'comp_het') | (df['mut2_genotype'] == 'comp_het') | (df['mut3_genotype'] == 'comp_het')]\r\n+    elif filter_criteria == 9:\r\n+        df = df[(df['mut1_genotype'].isin(['hom', 'comp_het'])) | (df['mut2_genotype'].isin(['hom', 'comp_het'])) | (df['mut3_genotype'].isin(['hom', 'comp_het']))]\r\n+\r\n+    if country:\r\n+        country_map = {\r\n+            'AUS': 'Austria',\r\n+            'FRA': 'France',\r\n+            'GER': 'Germany',\r\n+            'IND': 'India',\r\n+            'ITA': 'Italy',\r\n+            'PAK': 'Pakistan',\r\n+            'PRI': 'Puerto Rico',\r\n+            'UK': 'United Kingdom',\r\n+            'USA': 'United States'\r\n+        }\r\n+        if country in country_map:\r\n+            df = df[df['country'] == country_map[country]]\r\n+\r\n+    return df\r\n+\r\n+_dataframe_cache = {}\r\n+\r\n+class NumpyEncoder(json.JSONEncoder):\r\n+    def default(self, obj):\r\n+        if isinstance(obj, np.integer):\r\n+            return int(obj)\r\n+        elif isinstance(obj, np.floating):\r\n+            return float(obj)\r\n+        elif isinstance(obj, np.ndarray):\r\n+            return obj.tolist()\r\n+        return super(NumpyEncoder, self).default(obj)\r\n+\r\n+def safe_get(df, column, index, default=None):\r\n+    try:\r\n+        value = df[column].iloc[index]\r\n+        if pd.isna(value):\r\n+            return default\r\n+        if isinstance(value, (np.integer, np.floating)):\r\n+            return value.item()\r\n+        return value\r\n+    except:\r\n+        return default\r\n+\r\n+def get_unique_studies(disease_abbrev, gene, filter_criteria=None, aao=None, country=None, directory='excel'):\r\n+    results = []\r\n+\r\n+    for filename in os.listdir(directory):\r\n+        if filename.startswith('.~') or filename.startswith('~$'):\r\n+            continue  # Skip temporary Excel files\r\n+        \r\n+        if filename.endswith('.xlsx') or filename.endswith('.xls'):\r\n+            file_path = os.path.join(directory, filename)\r\n+            try:\r\n+                df = get_cached_dataframe(file_path)\r\n+                df = df[df['ensemble_decision'] == 'IN']\r\n+                \r\n+                # Only apply the filter if filter_criteria is provided\r\n+                if filter_criteria is not None:\r\n+                    df = apply_filter(df, filter_criteria, aao, country)\r\n+                \r\n+                # Use pd.concat instead of append\r\n+                filtered_df = pd.concat([\r\n+                    df[(df['disease_abbrev'] == disease_abbrev) & (df['gene1'] == gene)],\r\n+                    df[(df['disease_abbrev'] == disease_abbrev) & (df['gene2'] == gene)],\r\n+                    df[(df['disease_abbrev'] == disease_abbrev) & (df['gene3'] == gene)]\r\n+                ])\r\n+\r\n+                for pmid in filtered_df['pmid'].unique():\r\n+                    try:\r\n+                        study_df = filtered_df[filtered_df['pmid'] == pmid]\r\n+                        number_of_cases = len(study_df)\r\n+                        \r\n+                        study_design = safe_get(study_df, 'study_design', 0, 'Unknown')\r\n+                        ethnicity = safe_get(study_df, 'ethnicity', 0, 'Unknown')\r\n+                        \r\n+                        proportion_of_male_patients = (\r\n+                            len(study_df[study_df['sex'] == 'male']) / number_of_cases \r\n+                            if number_of_cases > 0 else 0\r\n+                        )\r\n+                        \r\n+                        mean_age_at_onset = study_df['aao'].mean()\r\n+                        mean_age_at_onset = (\r\n+                            float(mean_age_at_onset) if not pd.isna(mean_age_at_onset) else None\r\n+                        )\r\n+                        \r\n+                        std_dev_age_at_onset = study_df['aao'].std()\r\n+                        std_dev_age_at_onset = (\r\n+                            float(std_dev_age_at_onset) if not pd.isna(std_dev_age_at_onset) else None\r\n+                        )\r\n+                        \r\n+                        mutations = {\r\n+                            'mut1_p': safe_get(study_df, 'mut1_p', 0, 'Unknown'),\r\n+                            'mut2_p': safe_get(study_df, 'mut2_p', 0, 'Unknown'),\r\n+                            'mut3_p': safe_get(study_df, 'mut3_p', 0, 'Unknown')\r\n+                            'mut1_genotype': safe_get(study_df, 'mut1_genotype', 0, 'Unknown'),\r\n+                            'mut2_genotype': safe_get(study_df, 'mut2_genotype', 0, 'Unknown'),\r\n+                            'mut3_genotype': safe_get(study_df, 'mut3_genotype', 0, 'Unknown')\r\n+                        }\r\n+\r\n+                        result = {\r\n+                            'pmid': int(pmid) if isinstance(pmid, (np.integer, np.floating)) else pmid,\r\n+                            'study_design': study_design,\r\n+                            'number_of_cases': int(number_of_cases),\r\n+                            'ethnicity': ethnicity,\r\n+                            'proportion_of_male_patients': float(proportion_of_male_patients),\r\n+                            'mean_age_at_onset': mean_age_at_onset,\r\n+                            'std_dev_age_at_onset': std_dev_age_at_onset,\r\n+                            'mutations': mutations\r\n+                        }\r\n+\r\n+                        # Convert numpy types to Python types\r\n+                        result = json.loads(json.dumps(result, cls=NumpyEncoder))\r\n+                        results.append(result)\r\n+                    except Exception as e:\r\n+                        print(f\"Error processing PMID {pmid} in file {filename}: {str(e)}\")\r\n+                        continue\r\n+\r\n+            except Exception as e:\r\n+                print(f\"Error reading file {filename}: {str(e)}\")\r\n+                continue\r\n+\r\n+    return results\r\n+\r\n+# Update other functions to handle optional parameters as well\r\n+def get_study_design_for_each_study(pmids, filter_criteria=None, aao=None, country=None, directory='excel'):\r\n+    study_design_list = []\r\n+\r\n+    for filename in os.listdir(directory):\r\n+        if filename.endswith('.xlsx') or filename.endswith('.xls'):\r\n+            file_path = os.path.join(directory, filename)\r\n+            df = get_cached_dataframe(file_path)\r\n+            df = df[df['ensemble_decision'] == 'IN']\r\n+            \r\n+            if filter_criteria is not None:\r\n+                df = apply_filter(df, filter_criteria, aao, country)\r\n+            \r\n+            pmid_list = list(map(int, pmids.split(',')))\r\n+            filtered_df = df[df['pmid'].isin(pmid_list)]\r\n+            study_design_list.extend(filtered_df['study_design'])\r\n+\r\n+    return study_design_list\r\n+\r\n+def get_number_of_cases_for_each_study(pmids, filter_criteria=None, aao=None, country=None, directory='excel'):\r\n+    number_of_cases_list = []\r\n+\r\n+    for filename in os.listdir(directory):\r\n+        if filename.endswith('.xlsx') or filename.endswith('.xls'):\r\n+            file_path = os.path.join(directory, filename)\r\n+            df = get_cached_dataframe(file_path)\r\n+            df = df[df['ensemble_decision'] == 'IN']\r\n+            \r\n+            if filter_criteria is not None:\r\n+                df = apply_filter(df, filter_criteria, aao, country)\r\n+            \r\n+            pmid_list = list(map(int, pmids.split(',')))\r\n+            filtered_df = df[df['pmid'].isin(pmid_list)]\r\n+            filtered_df = filtered_df.groupby('pmid').size().reset_index(name='number_of_cases')\r\n+            number_of_cases_map = dict(zip(filtered_df['pmid'], filtered_df['number_of_cases']))\r\n+\r\n+    return number_of_cases_map\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727976593595,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -95,8 +95,9 @@\n         return default\r\n \r\n def get_unique_studies(disease_abbrev, gene, filter_criteria=None, aao=None, country=None, directory='excel'):\r\n     results = []\r\n+    disease_abbrev = disease_abbrev.upper()  # Convert input to uppercase\r\n \r\n     for filename in os.listdir(directory):\r\n         if filename.startswith('.~') or filename.startswith('~$'):\r\n             continue  # Skip temporary Excel files\r\n@@ -106,221 +107,11 @@\n             try:\r\n                 df = get_cached_dataframe(file_path)\r\n                 df = df[df['ensemble_decision'] == 'IN']\r\n                 \r\n-                # Only apply the filter if filter_criteria is provided\r\n-                if filter_criteria is not None:\r\n-                    df = apply_filter(df, filter_criteria, aao, country)\r\n+                # Convert disease_abbrev column to uppercase\r\n+                df['disease_abbrev'] = df['disease_abbrev'].str.upper()\r\n                 \r\n-                # Use pd.concat instead of append\r\n-                filtered_df = pd.concat([\r\n-                    df[(df['disease_abbrev'] == disease_abbrev) & (df['gene1'] == gene)],\r\n-                    df[(df['disease_abbrev'] == disease_abbrev) & (df['gene2'] == gene)],\r\n-                    df[(df['disease_abbrev'] == disease_abbrev) & (df['gene3'] == gene)]\r\n-                ])\r\n-\r\n-                for pmid in filtered_df['pmid'].unique():\r\n-                    try:\r\n-                        study_df = filtered_df[filtered_df['pmid'] == pmid]\r\n-                        number_of_cases = len(study_df)\r\n-                        \r\n-                        study_design = safe_get(study_df, 'study_design', 0, 'Unknown')\r\n-                        ethnicity = safe_get(study_df, 'ethnicity', 0, 'Unknown')\r\n-                        \r\n-                        proportion_of_male_patients = (\r\n-                            len(study_df[study_df['sex'] == 'male']) / number_of_cases \r\n-                            if number_of_cases > 0 else 0\r\n-                        )\r\n-                        \r\n-                        mean_age_at_onset = study_df['aao'].mean()\r\n-                        mean_age_at_onset = (\r\n-                            float(mean_age_at_onset) if not pd.isna(mean_age_at_onset) else None\r\n-                        )\r\n-                        \r\n-                        std_dev_age_at_onset = study_df['aao'].std()\r\n-                        std_dev_age_at_onset = (\r\n-                            float(std_dev_age_at_onset) if not pd.isna(std_dev_age_at_onset) else None\r\n-                        )\r\n-                        \r\n-                        mutations = {\r\n-                            'mut1_p': safe_get(study_df, 'mut1_p', 0, 'Unknown'),\r\n-                            'mut2_p': safe_get(study_df, 'mut2_p', 0, 'Unknown'),\r\n-                            'mut3_p': safe_get(study_df, 'mut3_p', 0, 'Unknown')\r\n-                            'mut1_genotype': safe_get(study_df, 'mut1_genotype', 0, 'Unknown'),\r\n-                            'mut2_genotype': safe_get(study_df, 'mut2_genotype', 0, 'Unknown'),\r\n-                            'mut3_genotype': safe_get(study_df, 'mut3_genotype', 0, 'Unknown')\r\n-                        }\r\n-\r\n-                        result = {\r\n-                            'pmid': int(pmid) if isinstance(pmid, (np.integer, np.floating)) else pmid,\r\n-                            'study_design': study_design,\r\n-                            'number_of_cases': int(number_of_cases),\r\n-                            'ethnicity': ethnicity,\r\n-                            'proportion_of_male_patients': float(proportion_of_male_patients),\r\n-                            'mean_age_at_onset': mean_age_at_onset,\r\n-                            'std_dev_age_at_onset': std_dev_age_at_onset,\r\n-                            'mutations': mutations\r\n-                        }\r\n-\r\n-                        # Convert numpy types to Python types\r\n-                        result = json.loads(json.dumps(result, cls=NumpyEncoder))\r\n-                        results.append(result)\r\n-                    except Exception as e:\r\n-                        print(f\"Error processing PMID {pmid} in file {filename}: {str(e)}\")\r\n-                        continue\r\n-\r\n-            except Exception as e:\r\n-                print(f\"Error reading file {filename}: {str(e)}\")\r\n-                continue\r\n-\r\n-    return results\r\n-\r\n-# Update other functions to handle optional parameters as well\r\n-def get_study_design_for_each_study(pmids, filter_criteria=None, aao=None, country=None, directory='excel'):\r\n-    study_design_list = []\r\n-\r\n-    for filename in os.listdir(directory):\r\n-        if filename.endswith('.xlsx') or filename.endswith('.xls'):\r\n-            file_path = os.path.join(directory, filename)\r\n-            df = get_cached_dataframe(file_path)\r\n-            df = df[df['ensemble_decision'] == 'IN']\r\n-            \r\n-            if filter_criteria is not None:\r\n-                df = apply_filter(df, filter_criteria, aao, country)\r\n-            \r\n-            pmid_list = list(map(int, pmids.split(',')))\r\n-            filtered_df = df[df['pmid'].isin(pmid_list)]\r\n-            study_design_list.extend(filtered_df['study_design'])\r\n-\r\n-    return study_design_list\r\n-\r\n-def get_number_of_cases_for_each_study(pmids, filter_criteria=None, aao=None, country=None, directory='excel'):\r\n-    number_of_cases_list = []\r\n-\r\n-    for filename in os.listdir(directory):\r\n-        if filename.endswith('.xlsx') or filename.endswith('.xls'):\r\n-            file_path = os.path.join(directory, filename)\r\n-            df = get_cached_dataframe(file_path)\r\n-            df = df[df['ensemble_decision'] == 'IN']\r\n-            \r\n-            if filter_criteria is not None:\r\n-                df = apply_filter(df, filter_criteria, aao, country)\r\n-            \r\n-            pmid_list = list(map(int, pmids.split(',')))\r\n-            filtered_df = df[df['pmid'].isin(pmid_list)]\r\n-            filtered_df = filtered_df.groupby('pmid').size().reset_index(name='number_of_cases')\r\n-            number_of_cases_map = dict(zip(filtered_df['pmid'], filtered_df['number_of_cases']))\r\n-\r\n-    return number_of_cases_map\n-import pandas as pd\r\n-import numpy as np\r\n-import os\r\n-import json\r\n-\r\n-_dataframe_cache = {}\r\n-\r\n-def get_cached_dataframe(file_path):\r\n-    global _dataframe_cache\r\n-\r\n-    file_mod_time = os.path.getmtime(file_path)\r\n-\r\n-    if file_path in _dataframe_cache and _dataframe_cache[file_path]['mod_time'] == file_mod_time:\r\n-        return _dataframe_cache[file_path]['dataframe']\r\n-\r\n-    # Determine the file extension\r\n-    _, file_extension = os.path.splitext(file_path)\r\n-    \r\n-    # Choose the appropriate engine based on the file extension\r\n-    if file_extension.lower() == '.xlsx':\r\n-        engine = 'openpyxl'\r\n-    elif file_extension.lower() == '.xls':\r\n-        engine = 'xlrd'\r\n-    else:\r\n-        raise ValueError(f\"Unsupported file extension: {file_extension}\")\r\n-\r\n-    # Read the Excel file with the specified engine\r\n-    df = pd.read_excel(file_path, engine=engine)\r\n-\r\n-    _dataframe_cache[file_path] = {\r\n-        'dataframe': df,\r\n-        'mod_time': file_mod_time\r\n-    }\r\n-\r\n-    return df\r\n-\r\n-def apply_filter(df, filter_criteria, aao, country):\r\n-    if filter_criteria == 1:\r\n-        df = df[df['index_pat'] == 'yes']\r\n-    elif filter_criteria == 2 and aao is not None:\r\n-        df = df[df['aao'] < aao]\r\n-    elif filter_criteria == 3 and aao is not None:\r\n-        df = df[df['aao'] >= aao]\r\n-    elif filter_criteria == 4:\r\n-        df = df[df['sex'] == 'female']\r\n-    elif filter_criteria == 5:\r\n-        df = df[df['sex'] == 'male']\r\n-    elif filter_criteria == 6:\r\n-        df = df[(df['mut1_genotype'] == 'hom') | (df['mut2_genotype'] == 'hom') | (df['mut3_genotype'] == 'hom')]\r\n-    elif filter_criteria == 7:\r\n-        df = df[(df['mut1_genotype'] == 'het') | (df['mut2_genotype'] == 'het') | (df['mut3_genotype'] == 'het')]\r\n-    elif filter_criteria == 8:\r\n-        df = df[(df['mut1_genotype'] == 'comp_het') | (df['mut2_genotype'] == 'comp_het') | (df['mut3_genotype'] == 'comp_het')]\r\n-    elif filter_criteria == 9:\r\n-        df = df[(df['mut1_genotype'].isin(['hom', 'comp_het'])) | (df['mut2_genotype'].isin(['hom', 'comp_het'])) | (df['mut3_genotype'].isin(['hom', 'comp_het']))]\r\n-\r\n-    if country:\r\n-        country_map = {\r\n-            'AUS': 'Austria',\r\n-            'FRA': 'France',\r\n-            'GER': 'Germany',\r\n-            'IND': 'India',\r\n-            'ITA': 'Italy',\r\n-            'PAK': 'Pakistan',\r\n-            'PRI': 'Puerto Rico',\r\n-            'UK': 'United Kingdom',\r\n-            'USA': 'United States'\r\n-        }\r\n-        if country in country_map:\r\n-            df = df[df['country'] == country_map[country]]\r\n-\r\n-    return df\r\n-\r\n-_dataframe_cache = {}\r\n-\r\n-class NumpyEncoder(json.JSONEncoder):\r\n-    def default(self, obj):\r\n-        if isinstance(obj, np.integer):\r\n-            return int(obj)\r\n-        elif isinstance(obj, np.floating):\r\n-            return float(obj)\r\n-        elif isinstance(obj, np.ndarray):\r\n-            return obj.tolist()\r\n-        return super(NumpyEncoder, self).default(obj)\r\n-\r\n-def safe_get(df, column, index, default=None):\r\n-    try:\r\n-        value = df[column].iloc[index]\r\n-        if pd.isna(value):\r\n-            return default\r\n-        if isinstance(value, (np.integer, np.floating)):\r\n-            return value.item()\r\n-        return value\r\n-    except:\r\n-        return default\r\n-\r\n-def get_unique_studies(disease_abbrev, gene, filter_criteria=None, aao=None, country=None, directory='excel'):\r\n-    results = []\r\n-\r\n-    for filename in os.listdir(directory):\r\n-        if filename.startswith('.~') or filename.startswith('~$'):\r\n-            continue  # Skip temporary Excel files\r\n-        \r\n-        if filename.endswith('.xlsx') or filename.endswith('.xls'):\r\n-            file_path = os.path.join(directory, filename)\r\n-            try:\r\n-                df = get_cached_dataframe(file_path)\r\n-                df = df[df['ensemble_decision'] == 'IN']\r\n-                \r\n                 # Only apply the filter if filter_criteria is provided\r\n                 if filter_criteria is not None:\r\n                     df = apply_filter(df, filter_criteria, aao, country)\r\n                 \r\n@@ -335,48 +126,10 @@\n                     try:\r\n                         study_df = filtered_df[filtered_df['pmid'] == pmid]\r\n                         number_of_cases = len(study_df)\r\n                         \r\n-                        study_design = safe_get(study_df, 'study_design', 0, 'Unknown')\r\n-                        ethnicity = safe_get(study_df, 'ethnicity', 0, 'Unknown')\r\n-                        \r\n-                        proportion_of_male_patients = (\r\n-                            len(study_df[study_df['sex'] == 'male']) / number_of_cases \r\n-                            if number_of_cases > 0 else 0\r\n-                        )\r\n-                        \r\n-                        mean_age_at_onset = study_df['aao'].mean()\r\n-                        mean_age_at_onset = (\r\n-                            float(mean_age_at_onset) if not pd.isna(mean_age_at_onset) else None\r\n-                        )\r\n-                        \r\n-                        std_dev_age_at_onset = study_df['aao'].std()\r\n-                        std_dev_age_at_onset = (\r\n-                            float(std_dev_age_at_onset) if not pd.isna(std_dev_age_at_onset) else None\r\n-                        )\r\n-                        \r\n-                        mutations = {\r\n-                            'mut1_p': safe_get(study_df, 'mut1_p', 0, 'Unknown'),\r\n-                            'mut2_p': safe_get(study_df, 'mut2_p', 0, 'Unknown'),\r\n-                            'mut3_p': safe_get(study_df, 'mut3_p', 0, 'Unknown')\r\n-                            'mut1_': safe_get(study_df, 'mut1_p', 0, 'Unknown'),\r\n-                            'mut2_': safe_get(study_df, 'mut2_p', 0, 'Unknown'),\r\n-                            'mut3_': safe_get(study_df, 'mut3_p', 0, 'Unknown')\r\n-                        }\r\n+                        # Rest of the function remains the same...\r\n \r\n-                        result = {\r\n-                            'pmid': int(pmid) if isinstance(pmid, (np.integer, np.floating)) else pmid,\r\n-                            'study_design': study_design,\r\n-                            'number_of_cases': int(number_of_cases),\r\n-                            'ethnicity': ethnicity,\r\n-                            'proportion_of_male_patients': float(proportion_of_male_patients),\r\n-                            'mean_age_at_onset': mean_age_at_onset,\r\n-                            'std_dev_age_at_onset': std_dev_age_at_onset,\r\n-                            'mutations': mutations\r\n-                        }\r\n-\r\n-                        # Convert numpy types to Python types\r\n-                        result = json.loads(json.dumps(result, cls=NumpyEncoder))\r\n                         results.append(result)\r\n                     except Exception as e:\r\n                         print(f\"Error processing PMID {pmid} in file {filename}: {str(e)}\")\r\n                         continue\r\n"
                },
                {
                    "date": 1727976608153,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,10 +126,48 @@\n                     try:\r\n                         study_df = filtered_df[filtered_df['pmid'] == pmid]\r\n                         number_of_cases = len(study_df)\r\n                         \r\n-                        # Rest of the function remains the same...\r\n+                        study_design = safe_get(study_df, 'study_design', 0, 'Unknown')\r\n+                        ethnicity = safe_get(study_df, 'ethnicity', 0, 'Unknown')\r\n+                        \r\n+                        proportion_of_male_patients = (\r\n+                            len(study_df[study_df['sex'] == 'male']) / number_of_cases \r\n+                            if number_of_cases > 0 else 0\r\n+                        )\r\n+                        \r\n+                        mean_age_at_onset = study_df['aao'].mean()\r\n+                        mean_age_at_onset = (\r\n+                            float(mean_age_at_onset) if not pd.isna(mean_age_at_onset) else None\r\n+                        )\r\n+                        \r\n+                        std_dev_age_at_onset = study_df['aao'].std()\r\n+                        std_dev_age_at_onset = (\r\n+                            float(std_dev_age_at_onset) if not pd.isna(std_dev_age_at_onset) else None\r\n+                        )\r\n+                        \r\n+                        mutations = {\r\n+                            'mut1_p': safe_get(study_df, 'mut1_p', 0, 'Unknown'),\r\n+                            'mut2_p': safe_get(study_df, 'mut2_p', 0, 'Unknown'),\r\n+                            'mut3_p': safe_get(study_df, 'mut3_p', 0, 'Unknown'),\r\n+                            'mut1_genotype': safe_get(study_df, 'mut1_genotype', 0, 'Unknown'),\r\n+                            'mut2_genotype': safe_get(study_df, 'mut2_genotype', 0, 'Unknown'),\r\n+                            'mut3_genotype': safe_get(study_df, 'mut3_genotype', 0, 'Unknown')\r\n+                        }\r\n \r\n+                        result = {\r\n+                            'pmid': int(pmid) if isinstance(pmid, (np.integer, np.floating)) else pmid,\r\n+                            'study_design': study_design,\r\n+                            'number_of_cases': int(number_of_cases),\r\n+                            'ethnicity': ethnicity,\r\n+                            'proportion_of_male_patients': float(proportion_of_male_patients),\r\n+                            'mean_age_at_onset': mean_age_at_onset,\r\n+                            'std_dev_age_at_onset': std_dev_age_at_onset,\r\n+                            'mutations': mutations\r\n+                        }\r\n+\r\n+                        # Convert numpy types to Python types\r\n+                        result = json.loads(json.dumps(result, cls=NumpyEncoder))\r\n                         results.append(result)\r\n                     except Exception as e:\r\n                         print(f\"Error processing PMID {pmid} in file {filename}: {str(e)}\")\r\n                         continue\r\n"
                },
                {
                    "date": 1727976630865,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -93,8 +93,9 @@\n         return value\r\n     except:\r\n         return default\r\n \r\n+\r\n def get_unique_studies(disease_abbrev, gene, filter_criteria=None, aao=None, country=None, directory='excel'):\r\n     results = []\r\n     disease_abbrev = disease_abbrev.upper()  # Convert input to uppercase\r\n \r\n"
                },
                {
                    "date": 1727976655394,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -93,9 +93,23 @@\n         return value\r\n     except:\r\n         return default\r\n \r\n+def get_unique_disease_abbrev(directory='excel'):\r\n+    disease_abbrev_set = set()\r\n \r\n+    for filename in os.listdir(directory):\r\n+        if filename.endswith('.xlsx') or filename.endswith('.xls'):\r\n+            file_path = os.path.join(directory, filename)\r\n+\r\n+            df = get_cached_dataframe(file_path)\r\n+\r\n+            filtered_df = df[df['ensemble_decision'] == 'IN']\r\n+\r\n+            # Convert disease_abbrev to uppercase before adding to the set\r\n+            disease_abbrev_set.update(filtered_df['disease_abbrev'].str.upper())\r\n+\r\n+    return list(disease_abbrev_set)\r\n def get_unique_studies(disease_abbrev, gene, filter_criteria=None, aao=None, country=None, directory='excel'):\r\n     results = []\r\n     disease_abbrev = disease_abbrev.upper()  # Convert input to uppercase\r\n \r\n"
                }
            ],
            "date": 1727974565708,
            "name": "Commit-0",
            "content": "import pandas as pd\r\nimport os\r\n\r\n_dataframe_cache = {}\r\n\r\ndef get_cached_dataframe(file_path):\r\n    global _dataframe_cache\r\n\r\n    file_mod_time = os.path.getmtime(file_path)\r\n\r\n    if file_path in _dataframe_cache and _dataframe_cache[file_path]['mod_time'] == file_mod_time:\r\n        return _dataframe_cache[file_path]['dataframe']\r\n\r\n    df = pd.read_excel(file_path)\r\n\r\n    _dataframe_cache[file_path] = {\r\n        'dataframe': df,\r\n        'mod_time': file_mod_time\r\n    }\r\n\r\n    return df\r\n\r\ndef apply_filter(df, filter_criteria, aao, country):\r\n    if filter_criteria == 1:\r\n        df = df[df['index_pat'] == 'yes']\r\n    elif filter_criteria == 2 and aao is not None:\r\n        df = df[df['aao'] < aao]\r\n    elif filter_criteria == 3 and aao is not None:\r\n        df = df[df['aao'] >= aao]\r\n    elif filter_criteria == 4:\r\n        df = df[df['sex'] == 'female']\r\n    elif filter_criteria == 5:\r\n        df = df[df['sex'] == 'male']\r\n    elif filter_criteria == 6:\r\n        df = df[(df['mut1_genotype'] == 'hom') | (df['mut2_genotype'] == 'hom') | (df['mut3_genotype'] == 'hom')]\r\n    elif filter_criteria == 7:\r\n        df = df[(df['mut1_genotype'] == 'het') | (df['mut2_genotype'] == 'het') | (df['mut3_genotype'] == 'het')]\r\n    elif filter_criteria == 8:\r\n        df = df[(df['mut1_genotype'] == 'comp_het') | (df['mut2_genotype'] == 'comp_het') | (df['mut3_genotype'] == 'comp_het')]\r\n    elif filter_criteria == 9:\r\n        df = df[(df['mut1_genotype'].isin(['hom', 'comp_het'])) | (df['mut2_genotype'].isin(['hom', 'comp_het'])) | (df['mut3_genotype'].isin(['hom', 'comp_het']))]\r\n\r\n    if country:\r\n        country_map = {\r\n            'AUS': 'Austria',\r\n            'FRA': 'France',\r\n            'GER': 'Germany',\r\n            'IND': 'India',\r\n            'ITA': 'Italy',\r\n            'PAK': 'Pakistan',\r\n            'PRI': 'Puerto Rico',\r\n            'UK': 'United Kingdom',\r\n            'USA': 'United States'\r\n        }\r\n        if country in country_map:\r\n            df = df[df['country'] == country_map[country]]\r\n\r\n    return df\r\n\r\ndef get_unique_studies(disease_abbrev, gene, filter_criteria=None, aao=None, country=None, directory='excel'):\r\n    results = []\r\n\r\n    for filename in os.listdir(directory):\r\n        if filename.endswith('.xlsx') or filename.endswith('.xls'):\r\n            file_path = os.path.join(directory, filename)\r\n            df = get_cached_dataframe(file_path)\r\n            df = df[df['ensemble_decision'] == 'IN']\r\n            \r\n            # Only apply the filter if filter_criteria is provided\r\n            if filter_criteria is not None:\r\n                df = apply_filter(df, filter_criteria, aao, country)\r\n            \r\n            filtered_df = df[(df['disease_abbrev'] == disease_abbrev) & (df['gene1'] == gene)]\r\n            filtered_df = filtered_df.append(df[(df['disease_abbrev'] == disease_abbrev) & (df['gene2'] == gene)])\r\n            filtered_df = filtered_df.append(df[(df['disease_abbrev'] == disease_abbrev) & (df['gene3'] == gene)])\r\n\r\n            for pmid in filtered_df['pmid'].unique():\r\n                study_df = filtered_df[filtered_df['pmid'] == pmid]\r\n                # ... (rest of the function remains the same)\r\n\r\n    return results\r\n\r\n# Update other functions to handle optional parameters as well\r\ndef get_study_design_for_each_study(pmids, filter_criteria=None, aao=None, country=None, directory='excel'):\r\n    study_design_list = []\r\n\r\n    for filename in os.listdir(directory):\r\n        if filename.endswith('.xlsx') or filename.endswith('.xls'):\r\n            file_path = os.path.join(directory, filename)\r\n            df = get_cached_dataframe(file_path)\r\n            df = df[df['ensemble_decision'] == 'IN']\r\n            \r\n            if filter_criteria is not None:\r\n                df = apply_filter(df, filter_criteria, aao, country)\r\n            \r\n            pmid_list = list(map(int, pmids.split(',')))\r\n            filtered_df = df[df['pmid'].isin(pmid_list)]\r\n            study_design_list.extend(filtered_df['study_design'])\r\n\r\n    return study_design_list\r\n\r\ndef get_number_of_cases_for_each_study(pmids, filter_criteria=None, aao=None, country=None, directory='excel'):\r\n    number_of_cases_list = []\r\n\r\n    for filename in os.listdir(directory):\r\n        if filename.endswith('.xlsx') or filename.endswith('.xls'):\r\n            file_path = os.path.join(directory, filename)\r\n            df = get_cached_dataframe(file_path)\r\n            df = df[df['ensemble_decision'] == 'IN']\r\n            \r\n            if filter_criteria is not None:\r\n                df = apply_filter(df, filter_criteria, aao, country)\r\n            \r\n            pmid_list = list(map(int, pmids.split(',')))\r\n            filtered_df = df[df['pmid'].isin(pmid_list)]\r\n            filtered_df = filtered_df.groupby('pmid').size().reset_index(name='number_of_cases')\r\n            number_of_cases_map = dict(zip(filtered_df['pmid'], filtered_df['number_of_cases']))\r\n\r\n    return number_of_cases_map"
        }
    ]
}