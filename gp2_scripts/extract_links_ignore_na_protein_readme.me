# Web Link Extractor for Genetic Variants

## Overview

The `extract_links_ignore_na_protein.py` script is designed to scrape genetic mutation data from a website. It extracts links from a webpage that contain "/sequence_variations" in their URLs, visits each link, and extracts structured genetic variant information. The script specifically filters for protein identifiers that start with "p." and saves the data in CSV format.

## Purpose

This tool helps researchers and data analysts working with genetic mutation databases to:
- Extract genetic variant information from mdsgene.org
- Automate the collection of protein mutation data
- Filter for specific types of protein notations
- Convert web data into a structured CSV format for further analysis
- Build datasets from public genetic variant repositories

## How It Works

1. The script asks for a URL that contains links to mutation pages
2. It requests a filename to save the extracted data as CSV
3. It scans the provided URL for links containing "/sequence_variations"
4. For each link found:
   - It visits the page and extracts the mutation details
   - It looks for specific data fields in the HTML structure
   - It filters out entries where the protein identifier doesn't start with "p."
5. It saves valid entries to the specified CSV file

## Requirements

- Python 3.6 or higher
- `requests` library (for HTTP requests)
- `BeautifulSoup4` library (for HTML parsing)
- `time` module (standard library)
- `csv` module (standard library)
- `re` module (standard library)

Install the required external libraries with:
```
pip install requests beautifulsoup4
```

## Usage

1. Run the script:
   ```
   python extract_links_ignore_na_protein.py
   ```

2. When prompted, enter the URL to scan for genetic variant links:
   ```
   Введите URL для извлечения ссылок:

   Пример:
   SNCA: https://www.mdsgene.org/d/1/g/2?p=-1&_mu=1&mu=0&mu=1&fc=0
   VPS35: https://www.mdsgene.org/d/1/g/13?fc=0&mu=0&mu=1&_mu=1&_country=1
   PRKN: https://www.mdsgene.org/d/1/g/4?p=-1&_mu=1&mu=0&mu=1&fc=0
   PARK7: https://www.mdsgene.org/d/1/g/3?p=-1&_mu=1&mu=0&mu=1&fc=0
   ```

3. When prompted, enter the desired output filename:
   ```
   Введите имя файла для сохранения данных (с расширением .csv): PINK1_variants.csv
   ```

4. The script will process the data and display progress:
   ```
   Найдено 50 ссылок. Начинаем обработку...
   Обработка ссылки 1 из 50: https://www.mdsgene.org/sequence_variations/1234
   Обработано 1/50 ссылок
   ...
   ```

5. After completion, it will provide statistics:
   ```
   Обработка завершена. Данные сохранены в файл 'PINK1_variants.csv'.
   Всего обработано ссылок: 50
   Валидных записей (protein начинается с 'p.'): 42
   Пропущено записей: 6
   Ошибок обработки: 2
   ```

## Data Extraction Details

The script extracts the following information from each mutation page:
- **url**: The full URL of the mutation page
- **protein**: Protein level identifier (e.g., "p.Arg492*")
- **gene**: Gene name
- **hg19**: Genomic location in the hg19 reference genome
- **ref_alt**: Reference and alternative alleles

## Notes

- The script ignores SSL certificate validation (`verify=False`) to handle sites with self-signed or invalid certificates.
- It includes a 1-second delay between requests to avoid overloading the server.
- It automatically completes relative URLs by adding the base URL "https://www.mdsgene.org".
- The script specifically targets the MDSGene website structure, but can be adapted for other genetic databases.
- Only entries where the protein identifier starts with "p." are included in the output.
- Error handling ensures the script continues even if some links cannot be processed.

## Output Format

The resulting CSV file will contain the following columns:
- url
- protein
- gene
- hg19
- ref_alt

Example row:
```
https://www.mdsgene.org/sequence_variations/1234,p.Arg492*,PINK1,1:20975710,C>T
```

## HTML Structure Expected

The script expects specific HTML elements and classes:
- `div` elements with class "row" for each data row
- `div` elements with classes containing "columns" for header and value columns
- Text patterns such as "Protein level identifier", "Gene name:", etc.

## Integration with Other Tools

The CSV file generated by this script can be directly used with the `csv_to_excel.py` script to import the data into the Excel template file, or with other analysis tools in your genetic research workflow.

## Troubleshooting

- **No links found**: Check if the page structure has changed or if the URL is correct.
- **Connection errors**: Verify your internet connection and the website availability.
- **No valid records**: The website may have changed its structure, or the mutations might not use the "p." notation.
- **Slow processing**: The script includes a delay to be respectful of the server; increase it if needed.
- **Parser errors**: If the website structure changes, you may need to update the `extract_data_from_html` function.