# JSON to CSV Extractor for Genetic Mutation Data

## Overview

This Python script (`extract_from_json_ignore_na_protein.py`) extracts genetic mutation data from a JSON source (either via URL or local file) and converts it to a CSV file format. The script specifically filters for protein identifiers that start with "p." and organizes the data according to predefined fields.

## Purpose

The script is designed to help researchers and data analysts working with genetic mutation data to:
- Retrieve mutation data from JSON endpoints
- Filter for relevant protein mutations
- Convert the data into a structured CSV format suitable for further analysis
- Skip entries where the protein identifier doesn't follow the required format

## How It Works

1. The script prompts for a URL to fetch JSON

Примечание: он будет работать с данными которые реализованны в новом подходе к MDSGene
Примеры:
PINK1
http://localhost:8000/unique_studies/PARK/PINK1?filter_criteria=0&aao=50&mutations=Pathogenic%2CLikely+Pathogenic
LRRK2
http://localhost:8000/unique_studies/PARK/LRRK2?filter_criteria=0&aao=50&mutations=Pathogenic%2CLikely+Pathogenic
GBA1:
http://localhost:8000/unique_studies/PARK/GBA1?filter_criteria=0&aao=50&mutations=Pathogenic%2CLikely+Pathogenic
RAB32:
http://localhost:8000/unique_studies/PARK/RAB32?filter_criteria=0&aao=50



2. It requests a filename to save the extracted data as CSV
3. It processes the JSON data, looking for mutation details in the structure
4. It filters out entries where the protein identifier doesn't start with "p."
5. It saves valid entries to the specified CSV file with the following columns:
   - pmid: PubMed ID reference
   - protein: Protein change notation (e.g., "p.Arg492*")
   - gene: Gene name
   - hg19: Genomic coordinate in hg19 reference
   - ref_alt: Reference and alternative alleles

## Requirements

- Python 3.6 or higher
- `requests` library (for HTTP requests)
- `json` module (standard library)
- `csv` module (standard library)

Install the required external library with:
```
pip install requests
```

## Usage

1. Run the script:
   ```
   python extract_from_json_ignore_na_protein.py
   ```

2. When prompted, enter the URL for the JSON data:
   ```
   Введите URL для получения JSON данных: https://example.com/api/mutations
   ```

3. When prompted, enter the desired output filename:
   ```
   Введите имя файла для сохранения данных (с расширением .csv): mutations_data.csv
   ```

4. The script will process the data and display progress and statistics:
   ```
   Обнаружен список данных под ключом 'results'
   Найдено 150 записей. Начинаем обработку...
   Обработка записи 1 из 150
   ...
   Всего обработано деталей: 325
   Валидных записей (protein начинается с 'p.'): 287
   Пропущено записей: 38
   Обработка завершена. Данные сохранены в файл 'mutations_data.csv'.
   ```

## Notes

- The script ignores SSL certificate validation (`verify=False`) to handle sites with self-signed or invalid certificates.
- It can process JSON data in various formats:
  - A list of entries
  - A dictionary containing a list under some key
  - A single dictionary (which gets converted to a list with one item)
- The script looks for mutation data in a specific structure where entries contain a "mutations" field, which contains a "details" field.
- Only entries where the protein identifier starts with "p." are included in the output.

## Example Data Structure

The script expects JSON data in a structure similar to:

```json
[
  {
    "pmid": "12345678",
    "mutations": [
      {
        "details": [
          {
            "proteinLevelIdentifier": "p.Arg492*",
            "geneName": "PINK1",
            "genomicLocation": "1:20975710",
            "hg": "19",
            "referenceAlternativeAllele": "C,T"
          }
        ]
      }
    ]
  }
]
```

## Output Format

The resulting CSV file will contain the following columns:
- pmid
- protein
- gene
- hg19
- ref_alt

Example row:
```
12345678,p.Arg492*,PINK1,1:20975710,C,T
```

## Integration with Other Tools

The CSV file generated by this script can be directly used with the `csv_to_excel.py` script described in the main README to import the data into the Excel template file.

## Troubleshooting

- If you encounter connection errors, check your internet connection and the validity of the URL.
- If the script doesn't find any valid records, verify that the JSON structure matches what the script expects and that there are protein identifiers starting with "p.".
- For SSL-related issues, the script already ignores certificate validation, but you might need to check if your network allows the connection.